This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-05-26T23:06:56.491Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
client/
  public/
    fonts/
      inter.json
    geometries/
      heart.gltf
  src/
    components/
      ui/
        accordion.tsx
        alert-dialog.tsx
        alert.tsx
        aspect-ratio.tsx
        avatar.tsx
        badge.tsx
        breadcrumb.tsx
        button.tsx
        calendar.tsx
        card.tsx
        carousel.tsx
        chart.tsx
        checkbox.tsx
        collapsible.tsx
        command.tsx
        context-menu.tsx
        dialog.tsx
        drawer.tsx
        dropdown-menu.tsx
        form.tsx
        hover-card.tsx
        input-otp.tsx
        input.tsx
        interface.tsx
        label.tsx
        menubar.tsx
        navigation-menu.tsx
        pagination.tsx
        popover.tsx
        progress.tsx
        radio-group.tsx
        resizable.tsx
        scroll-area.tsx
        select.tsx
        separator.tsx
        sheet.tsx
        sidebar.tsx
        skeleton.tsx
        slider.tsx
        sonner.tsx
        switch.tsx
        table.tsx
        tabs.tsx
        textarea.tsx
        toggle-group.tsx
        toggle.tsx
        tooltip.tsx
    game/
      components/
        models/
          Character.tsx
          Enemy.tsx
          Environment.tsx
          Pet.tsx
        ui/
          GameButton.tsx
          GameCard.tsx
          GameDialog.tsx
          GameInterface.tsx
          GameText.tsx
          LoadingScreen.tsx
        AgeVerification.tsx
        Battle.tsx
        CharacterCreation.tsx
        Environment.tsx
        Inventory.tsx
        LocationComponent.tsx
        Pet.tsx
        PetAssignment.tsx
        SoundManager.tsx
        Town.tsx
        TownLocation.tsx
        WelcomeScreen.tsx
      stores/
        useBattleStore.ts
        useGameStore.ts
        usePetStore.ts
        usePlayerStore.ts
      utils/
        helpers.ts
      constants.ts
      types.ts
    hooks/
      use-is-mobile.tsx
    lib/
      stores/
        useAudio.tsx
        useGame.tsx
      queryClient.ts
      utils.ts
    pages/
      not-found.tsx
    App.tsx
    index.css
    main.tsx
  index.html
server/
  index.ts
  routes.ts
  storage.ts
  vite.ts
shared/
  schema.ts
.gitignore
.replit
CLAUDE.md
docker-compose.yml
drizzle.config.ts
package.json
postcss.config.js
replit.nix
tailwind.config.ts
tasks.md
tsconfig.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: client/public/fonts/inter.json
================
{"metadata":{"type":"font","boundingBox":{"xMin":0,"yMin":-260,"xMax":952,"yMax":739.234375},"generator":"Fontello export by Glueckkanja AG","format":"json","copyright":""},"cssFontWeight":"normal","cssFontStyle":"normal","glyphs":{"A":{"ha":698,"x_min":0,"x_max":698,"o":"m 698 0 l 397 0 l 375 124 l 122 124 l 103 0 l 0 0 l 249 730 l 251 730 l 698 0 z m 245 569 l 249 461 l 340 221 l 155 221 l 245 569 z"}},"familyName":"Inter","ascender":739,"descender":-260,"underlinePosition":-100,"underlineThickness":50,"boundingBox":{"yMin":-260,"xMin":0,"yMax":739.234375,"xMax":952},"resolution":1000,"original_font_information":{"format":0,"copyright":"","fontFamily":"Inter","fontSubfamily":"Regular","uniqueID":"","fullName":"Inter Regular","version":"","postScriptName":"Inter-Regular"}}

================
File: client/public/geometries/heart.gltf
================
{
    "asset" : {
        "generator" : "Khronos glTF Blender I/O v1.8.19",
        "version" : "2.0"
    },
    "scene" : 0,
    "scenes" : [
        {
            "name" : "Scene",
            "nodes" : [
                0
            ]
        }
    ],
    "nodes" : [
        {
            "mesh" : 0,
            "name" : "Heart",
            "rotation" : [
                0,
                0,
                -0.7071068286895752,
                0.7071068286895752
            ],
            "translation" : [
                0,
                0.6625411510467529,
                0
            ]
        }
    ],
    "materials" : [
        {
            "doubleSided" : true,
            "name" : "Heart",
            "pbrMetallicRoughness" : {
                "baseColorTexture" : {
                    "index" : 0
                },
                "metallicRoughnessTexture" : {
                    "index" : 1
                },
                "roughnessFactor" : 0
            }
        }
    ],
    "meshes" : [
        {
            "name" : "Heart",
            "primitives" : [
                {
                    "attributes" : {
                        "POSITION" : 0,
                        "NORMAL" : 1,
                        "TEXCOORD_0" : 2
                    },
                    "indices" : 3,
                    "material" : 0
                }
            ]
        }
    ],
    "textures" : [
        {
            "sampler" : 0,
            "source" : 0
        },
        {
            "sampler" : 0,
            "source" : 1
        }
    ],
    "images" : [
        {
            "bufferView" : 4,
            "mimeType" : "image/png",
            "name" : "Image_0"
        },
        {
            "bufferView" : 5,
            "mimeType" : "image/png",
            "name" : "Image_1"
        }
    ],
    "accessors" : [
        {
            "bufferView" : 0,
            "componentType" : 5126,
            "count" : 538,
            "max" : [
                0.662283718585968,
                0.6605305075645447,
                0.4106346368789673
            ],
            "min" : [
                -0.5822796821594238,
                -0.6605305075645447,
                -0.4106346368789673
            ],
            "type" : "VEC3"
        },
        {
            "bufferView" : 1,
            "componentType" : 5126,
            "count" : 538,
            "type" : "VEC3"
        },
        {
            "bufferView" : 2,
            "componentType" : 5126,
            "count" : 538,
            "type" : "VEC2"
        },
        {
            "bufferView" : 3,
            "componentType" : 5123,
            "count" : 2952,
            "type" : "SCALAR"
        }
    ],
    "bufferViews" : [
        {
            "buffer" : 0,
            "byteLength" : 6456,
            "byteOffset" : 0
        },
        {
            "buffer" : 0,
            "byteLength" : 6456,
            "byteOffset" : 6456
        },
        {
            "buffer" : 0,
            "byteLength" : 4304,
            "byteOffset" : 12912
        },
        {
            "buffer" : 0,
            "byteLength" : 5904,
            "byteOffset" : 17216
        },
        {
            "buffer" : 0,
            "byteLength" : 77881,
            "byteOffset" : 23120
        },
        {
            "buffer" : 0,
            "byteLength" : 21690,
            "byteOffset" : 101004
        }
    ],
    "samplers" : [
        {
            "magFilter" : 9729,
            "minFilter" : 9987
        }
    ],
    "buffers" : [
        {
            "byteLength" : 122696,
            "uri" : "data:application/octet-stream;base64,"
        }
    ]
}

================
File: client/src/components/ui/accordion.tsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: client/src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: client/src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: client/src/components/ui/aspect-ratio.tsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: client/src/components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: client/src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: client/src/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: client/src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: client/src/components/ui/calendar.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: client/src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: client/src/components/ui/carousel.tsx
================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: client/src/components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: client/src/components/ui/checkbox.tsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: client/src/components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: client/src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: client/src/components/ui/context-menu.tsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: client/src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: client/src/components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: client/src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: client/src/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: client/src/components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: client/src/components/ui/input-otp.tsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Minus } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-ring",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Minus />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: client/src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: client/src/components/ui/interface.tsx
================
import { useEffect } from "react";
import { useGame } from "@/lib/stores/useGame";
import { useAudio } from "@/lib/stores/useAudio";
import { Button } from "./button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "./card";
import { Confetti } from "../game/Confetti";
import { VolumeX, Volume2, RotateCw, Trophy } from "lucide-react";

export function Interface() {
  const restart = useGame((state) => state.restart);
  const phase = useGame((state) => state.phase);
  const { isMuted, toggleMute } = useAudio();

  // Handle clicks on the interface in the ready phase to start the game
  useEffect(() => {
    if (phase === "ready") {
      const handleClick = () => {
        document.activeElement?.blur(); // Remove focus from any button
        const event = new KeyboardEvent("keydown", { code: "Space" });
        window.dispatchEvent(event);
      };

      window.addEventListener("click", handleClick);
      return () => window.removeEventListener("click", handleClick);
    }
  }, [phase]);

  return (
    <>
      <Confetti />
      
      {/* Top-right corner UI controls */}
      <div className="fixed top-4 right-4 flex gap-2 z-10">
        <Button
          variant="outline"
          size="icon"
          onClick={toggleMute}
          title={isMuted ? "Unmute" : "Mute"}
        >
          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}
        </Button>
        
        <Button
          variant="outline"
          size="icon"
          onClick={restart}
          title="Restart Game"
        >
          <RotateCw size={18} />
        </Button>
      </div>
      
      {/* Game completion overlay */}
      {phase === "ended" && (
        <div className="fixed inset-0 flex items-center justify-center z-20 bg-black/30">
          <Card className="w-full max-w-md mx-4 shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center justify-center gap-2">
                <Trophy className="text-yellow-500" />
                Level Complete!
              </CardTitle>
            </CardHeader>
            
            <CardContent>
              <p className="text-center text-muted-foreground">
                Congratulations! You successfully navigated the course.
              </p>
            </CardContent>
            
            <CardFooter className="flex justify-center">
              <Button onClick={restart} className="w-full">
                Play Again
              </Button>
            </CardFooter>
          </Card>
        </div>
      )}
      
      {/* Instructions panel */}
      <div className="fixed bottom-4 left-4 z-10">
        <Card className="w-auto max-w-xs bg-background/80 backdrop-blur-sm">
          <CardContent className="p-4">
            <h3 className="font-medium mb-2">Controls:</h3>
            <ul className="text-sm space-y-1 text-muted-foreground">
              <li>WASD or Arrow Keys: Move the ball</li>
              <li>Space: Jump</li>
              <li>R: Restart game</li>
              <li>M: Toggle sound</li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </>
  );
}

================
File: client/src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: client/src/components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: client/src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: client/src/components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}

================
File: client/src/components/ui/popover.tsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: client/src/components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: client/src/components/ui/radio-group.tsx
================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: client/src/components/ui/resizable.tsx
================
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: client/src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: client/src/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: client/src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: client/src/components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: client/src/components/ui/sidebar.tsx
================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";

import { useIsMobile } from "@/hooks/use-is-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const SIDEBAR_COOKIE_NAME = "sidebar_state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref,
  ) => {
    const isMobile = useIsMobile();
    const [openMobile, setOpenMobile] = React.useState(false);

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen);
    const open = openProp ?? _open;
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value;
        if (setOpenProp) {
          setOpenProp(openState);
        } else {
          _setOpen(openState);
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
      },
      [setOpenProp, open],
    );

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open);
    }, [isMobile, setOpen, setOpenMobile]);

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault();
          toggleSidebar();
        }
      };

      window.addEventListener("keydown", handleKeyDown);
      return () => window.removeEventListener("keydown", handleKeyDown);
    }, [toggleSidebar]);

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed";

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      ],
    );

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className,
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    );
  },
);
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className,
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      );
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <SheetHeader className="sr-only">
              <SheetTitle>Sidebar</SheetTitle>
              <SheetDescription>Displays the mobile sidebar.</SheetDescription>
            </SheetHeader>
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      );
    }

    return (
      <div
        ref={ref}
        className="group peer hidden text-sidebar-foreground md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]",
          )}
        />
        <div
          className={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className,
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    );
  },
);
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
});
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className,
      )}
      {...props}
    />
  );
});
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className,
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className,
      )}
      {...props}
    />
  );
});
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  );
});
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div";

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
));
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref,
  ) => {
    const Comp = asChild ? Slot : "button";
    const { isMobile, state } = useSidebar();

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    );

    if (!tooltip) {
      return button;
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      };
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    );
  },
);
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    showOnHover?: boolean;
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className,
    )}
    {...props}
  />
));
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean;
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className,
    )}
    {...props}
  />
));
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />);
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};

================
File: client/src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: client/src/components/ui/slider.tsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: client/src/components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: client/src/components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: client/src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: client/src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: client/src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: client/src/components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: client/src/components/ui/toggle.tsx
================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: client/src/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: client/src/game/components/models/Character.tsx
================
import React, { useRef } from "react";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

interface CharacterProps {
  color?: string;
  scale?: number;
}

const Character: React.FC<CharacterProps> = ({ 
  color = "#4FC3F7",
  scale = 1 
}) => {
  const group = useRef<THREE.Group>(null);
  const bodyRef = useRef<THREE.Mesh>(null);
  const headRef = useRef<THREE.Mesh>(null);
  const leftArmRef = useRef<THREE.Mesh>(null);
  const rightArmRef = useRef<THREE.Mesh>(null);
  const leftLegRef = useRef<THREE.Mesh>(null);
  const rightLegRef = useRef<THREE.Mesh>(null);
  
  // Animate character with subtle movements
  useFrame(({ clock }) => {
    const t = clock.getElapsedTime();
    
    // Subtle body movement
    if (bodyRef.current) {
      bodyRef.current.rotation.y = Math.sin(t * 0.5) * 0.1;
    }
    
    // Subtle head movement
    if (headRef.current) {
      headRef.current.rotation.y = Math.sin(t * 0.3) * 0.2;
      headRef.current.rotation.z = Math.sin(t * 0.4) * 0.05;
    }
    
    // Arm swinging
    if (leftArmRef.current && rightArmRef.current) {
      leftArmRef.current.rotation.x = Math.sin(t * 1.5) * 0.2;
      rightArmRef.current.rotation.x = Math.sin(t * 1.5 + Math.PI) * 0.2;
    }
    
    // Leg movement
    if (leftLegRef.current && rightLegRef.current) {
      leftLegRef.current.rotation.x = Math.sin(t * 1.5) * 0.1;
      rightLegRef.current.rotation.x = Math.sin(t * 1.5 + Math.PI) * 0.1;
    }
  });
  
  return (
    <group ref={group} scale={[scale, scale, scale]}>
      {/* Body */}
      <mesh ref={bodyRef} position={[0, 0.7, 0]} castShadow receiveShadow>
        <boxGeometry args={[0.6, 0.8, 0.3]} />
        <meshStandardMaterial color={color} />
      </mesh>
      
      {/* Head */}
      <mesh ref={headRef} position={[0, 1.35, 0]} castShadow receiveShadow>
        <boxGeometry args={[0.5, 0.5, 0.5]} />
        <meshStandardMaterial color={color} />
        
        {/* Eyes */}
        <group position={[0, 0, 0.26]}>
          {/* Left eye */}
          <mesh position={[-0.12, 0.05, 0]}>
            <sphereGeometry args={[0.06, 16, 16]} />
            <meshBasicMaterial color="white" />
            
            {/* Pupil */}
            <mesh position={[0, 0, 0.05]}>
              <sphereGeometry args={[0.03, 16, 16]} />
              <meshBasicMaterial color="black" />
            </mesh>
          </mesh>
          
          {/* Right eye */}
          <mesh position={[0.12, 0.05, 0]}>
            <sphereGeometry args={[0.06, 16, 16]} />
            <meshBasicMaterial color="white" />
            
            {/* Pupil */}
            <mesh position={[0, 0, 0.05]}>
              <sphereGeometry args={[0.03, 16, 16]} />
              <meshBasicMaterial color="black" />
            </mesh>
          </mesh>
        </group>
        
        {/* Mouth */}
        <mesh position={[0, -0.12, 0.26]}>
          <boxGeometry args={[0.2, 0.05, 0.01]} />
          <meshBasicMaterial color="#FF6B6B" />
        </mesh>
      </mesh>
      
      {/* Left Arm */}
      <group position={[-0.4, 0.7, 0]}>
        <mesh ref={leftArmRef} position={[0, -0.25, 0]} castShadow receiveShadow>
          <boxGeometry args={[0.2, 0.6, 0.2]} />
          <meshStandardMaterial color={color} />
        </mesh>
      </group>
      
      {/* Right Arm */}
      <group position={[0.4, 0.7, 0]}>
        <mesh ref={rightArmRef} position={[0, -0.25, 0]} castShadow receiveShadow>
          <boxGeometry args={[0.2, 0.6, 0.2]} />
          <meshStandardMaterial color={color} />
        </mesh>
      </group>
      
      {/* Left Leg */}
      <group position={[-0.2, 0.2, 0]}>
        <mesh ref={leftLegRef} position={[0, -0.35, 0]} castShadow receiveShadow>
          <boxGeometry args={[0.2, 0.7, 0.2]} />
          <meshStandardMaterial color="#5D4037" /> {/* Brown color for pants */}
        </mesh>
      </group>
      
      {/* Right Leg */}
      <group position={[0.2, 0.2, 0]}>
        <mesh ref={rightLegRef} position={[0, -0.35, 0]} castShadow receiveShadow>
          <boxGeometry args={[0.2, 0.7, 0.2]} />
          <meshStandardMaterial color="#5D4037" /> {/* Brown color for pants */}
        </mesh>
      </group>
    </group>
  );
};

export default Character;

================
File: client/src/game/components/models/Enemy.tsx
================
import React, { useRef } from "react";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

interface EnemyProps {
  type: string;
  level?: number;
  scale?: number;
}

const Enemy: React.FC<EnemyProps> = ({ 
  type, 
  level = 1, 
  scale = 1 
}) => {
  const group = useRef<THREE.Group>(null);
  const bodyRef = useRef<THREE.Mesh>(null);
  const headRef = useRef<THREE.Mesh>(null);
  
  // Generate a deterministic color based on enemy type
  const getEnemyColor = () => {
    switch (type) {
      case "wild_cat":
        return "#FF9800"; // Orange
      case "angry_bird":
        return "#F44336"; // Red
      case "mischievous_monkey":
        return "#795548"; // Brown
      case "sneaky_snake":
        return "#9C27B0"; // Purple
      default:
        // Generate a deterministic color based on type string
        const hash = type.split("").reduce((a, b) => {
          a = (a << 5) - a + b.charCodeAt(0);
          return a & a;
        }, 0);
        return `hsl(${Math.abs(hash) % 360}, 70%, 60%)`;
    }
  };
  
  // Animate enemy with menacing movements
  useFrame(({ clock }) => {
    const t = clock.getElapsedTime();
    
    if (bodyRef.current) {
      // Menacing body movement
      bodyRef.current.rotation.y = Math.sin(t * 1.5) * 0.2;
      bodyRef.current.position.y = Math.sin(t * 2) * 0.05 + 0.5;
    }
    
    if (headRef.current) {
      // Menacing head movement
      headRef.current.rotation.z = Math.sin(t * 2) * 0.1;
    }
    
    if (group.current) {
      // Subtle hovering and rotating
      group.current.position.y = Math.sin(t) * 0.05;
      group.current.rotation.y = Math.sin(t * 0.5) * 0.1;
    }
  });
  
  // Make enemies more menacing based on level
  const levelScale = 1 + (level - 1) * 0.1;
  
  // Render different enemy types
  const renderEnemy = () => {
    const baseColor = getEnemyColor();
    
    switch (type) {
      case "wild_cat":
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.5, 0]} castShadow receiveShadow>
              <boxGeometry args={[0.7, 0.5, 1] as any} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.8, 0.5]} castShadow receiveShadow>
              <boxGeometry args={[0.5, 0.5, 0.5] as any} />
              <meshStandardMaterial color={baseColor} />
              
              {/* Eyes - angry */}
              <group position={[0, 0, 0.26]}>
                {/* Left eye */}
                <mesh position={[-0.15, 0.1, 0]}>
                  <sphereGeometry args={[0.07, 16, 16]} />
                  <meshBasicMaterial color="yellow" />
                  
                  {/* Pupil */}
                  <mesh position={[0, 0, 0.05]}>
                    <sphereGeometry args={[0.03, 16, 16]} />
                    <meshBasicMaterial color="black" />
                  </mesh>
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.15, 0.1, 0]}>
                  <sphereGeometry args={[0.07, 16, 16]} />
                  <meshBasicMaterial color="yellow" />
                  
                  {/* Pupil */}
                  <mesh position={[0, 0, 0.05]}>
                    <sphereGeometry args={[0.03, 16, 16]} />
                    <meshBasicMaterial color="black" />
                  </mesh>
                </mesh>
              </group>
              
              {/* Mouth - angry */}
              <mesh position={[0, -0.1, 0.26]}>
                <boxGeometry args={[0.3, 0.05, 0.01]} />
                <meshBasicMaterial color="red" />
              </mesh>
              
              {/* Ears - pointy */}
              <mesh position={[-0.2, 0.3, 0]} rotation={[0, 0, Math.PI / 4]}>
                <coneGeometry args={[0.1, 0.2, 4]} />
                <meshStandardMaterial color={baseColor} />
              </mesh>
              <mesh position={[0.2, 0.3, 0]} rotation={[0, 0, -Math.PI / 4]}>
                <coneGeometry args={[0.1, 0.2, 4]} />
                <meshStandardMaterial color={baseColor} />
              </mesh>
            </mesh>
            
            {/* Tail */}
            <mesh position={[0, 0.5, -0.6]} rotation={[0.5, 0, 0]}>
              <cylinderGeometry args={[0.05, 0.05, 0.7, 8]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.25, 0.15, 0.3]}>
              <boxGeometry args={[0.15, 0.3, 0.15]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[0.25, 0.15, 0.3]}>
              <boxGeometry args={[0.15, 0.3, 0.15]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[-0.25, 0.15, -0.3]}>
              <boxGeometry args={[0.15, 0.3, 0.15]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[0.25, 0.15, -0.3]}>
              <boxGeometry args={[0.15, 0.3, 0.15]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
          </>
        );
        
      case "angry_bird":
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.5, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.4, 16, 16]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.9, 0.2]} castShadow receiveShadow>
              <sphereGeometry args={[0.3, 16, 16]} />
              <meshStandardMaterial color={baseColor} />
              
              {/* Eyes - angry */}
              <group position={[0, 0, 0.25]}>
                {/* Left eye */}
                <mesh position={[-0.12, 0.05, 0]}>
                  <sphereGeometry args={[0.08, 16, 16]} />
                  <meshBasicMaterial color="white" />
                  
                  {/* Pupil */}
                  <mesh position={[0, 0, 0.05]}>
                    <sphereGeometry args={[0.04, 16, 16]} />
                    <meshBasicMaterial color="black" />
                  </mesh>
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.12, 0.05, 0]}>
                  <sphereGeometry args={[0.08, 16, 16]} />
                  <meshBasicMaterial color="white" />
                  
                  {/* Pupil */}
                  <mesh position={[0, 0, 0.05]}>
                    <sphereGeometry args={[0.04, 16, 16]} />
                    <meshBasicMaterial color="black" />
                  </mesh>
                </mesh>
                
                {/* Eyebrows */}
                <mesh position={[-0.12, 0.15, 0.05]} rotation={[0, 0, Math.PI / 6]}>
                  <boxGeometry args={[0.15, 0.03, 0.02]} />
                  <meshBasicMaterial color="black" />
                </mesh>
                <mesh position={[0.12, 0.15, 0.05]} rotation={[0, 0, -Math.PI / 6]}>
                  <boxGeometry args={[0.15, 0.03, 0.02]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </group>
              
              {/* Beak */}
              <mesh position={[0, 0, 0.35]} rotation={[0, 0, 0]}>
                <coneGeometry args={[0.1, 0.3, 4]} rotation={[0, 0, Math.PI / 4]} />
                <meshStandardMaterial color="yellow" />
              </mesh>
            </mesh>
            
            {/* Wings */}
            <mesh position={[-0.4, 0.5, 0]} rotation={[0, 0, -0.4]}>
              <boxGeometry args={[0.4, 0.1, 0.5]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[0.4, 0.5, 0]} rotation={[0, 0, 0.4]}>
              <boxGeometry args={[0.4, 0.1, 0.5]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Tail */}
            <mesh position={[0, 0.5, -0.4]} rotation={[0.3, 0, 0]}>
              <boxGeometry args={[0.3, 0.1, 0.2]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.1, 0.1, 0]}>
              <boxGeometry args={[0.05, 0.2, 0.05]} />
              <meshStandardMaterial color="yellow" />
            </mesh>
            <mesh position={[0.1, 0.1, 0]}>
              <boxGeometry args={[0.05, 0.2, 0.05]} />
              <meshStandardMaterial color="yellow" />
            </mesh>
          </>
        );
        
      case "mischievous_monkey":
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.5, 0]} castShadow receiveShadow>
              <boxGeometry args={[0.5, 0.7, 0.4]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 1, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.35, 16, 16]} />
              <meshStandardMaterial color={baseColor} />
              
              {/* Face - lighter color */}
              <mesh position={[0, 0, 0.2]}>
                <sphereGeometry args={[0.25, 16, 16]} />
                <meshStandardMaterial color="#D7CCC8" />
              </mesh>
              
              {/* Eyes */}
              <group position={[0, 0.1, 0.3]}>
                {/* Left eye */}
                <mesh position={[-0.15, 0, 0]}>
                  <sphereGeometry args={[0.07, 16, 16]} />
                  <meshBasicMaterial color="white" />
                  
                  {/* Pupil */}
                  <mesh position={[0, 0, 0.05]}>
                    <sphereGeometry args={[0.04, 16, 16]} />
                    <meshBasicMaterial color="black" />
                  </mesh>
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.15, 0, 0]}>
                  <sphereGeometry args={[0.07, 16, 16]} />
                  <meshBasicMaterial color="white" />
                  
                  {/* Pupil */}
                  <mesh position={[0, 0, 0.05]}>
                    <sphereGeometry args={[0.04, 16, 16]} />
                    <meshBasicMaterial color="black" />
                  </mesh>
                </mesh>
              </group>
              
              {/* Nose */}
              <mesh position={[0, -0.05, 0.32]}>
                <sphereGeometry args={[0.07, 16, 16]} />
                <meshStandardMaterial color="#6D4C41" />
              </mesh>
              
              {/* Mouth */}
              <mesh position={[0, -0.15, 0.3]}>
                <boxGeometry args={[0.15, 0.03, 0.01]} />
                <meshBasicMaterial color="#6D4C41" />
              </mesh>
              
              {/* Ears */}
              <mesh position={[-0.25, 0.2, 0]} rotation={[0, 0, 0]}>
                <sphereGeometry args={[0.12, 16, 16]} />
                <meshStandardMaterial color={baseColor} />
              </mesh>
              <mesh position={[0.25, 0.2, 0]} rotation={[0, 0, 0]}>
                <sphereGeometry args={[0.12, 16, 16]} />
                <meshStandardMaterial color={baseColor} />
              </mesh>
            </mesh>
            
            {/* Arms */}
            <mesh position={[-0.35, 0.5, 0]} rotation={[0, 0, -0.3]}>
              <boxGeometry args={[0.5, 0.15, 0.15]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[0.35, 0.5, 0]} rotation={[0, 0, 0.3]}>
              <boxGeometry args={[0.5, 0.15, 0.15]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.15, 0, 0]}>
              <boxGeometry args={[0.15, 0.3, 0.15]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[0.15, 0, 0]}>
              <boxGeometry args={[0.15, 0.3, 0.15]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Tail */}
            <mesh position={[0, 0.4, -0.4]} rotation={[1, 0, 0]}>
              <cylinderGeometry args={[0.05, 0.05, 0.8, 8]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
          </>
        );
        
      case "sneaky_snake":
        return (
          <>
            {/* Body - snake-like */}
            <group ref={bodyRef}>
              {/* Main body segments */}
              <mesh position={[0, 0.3, 0]} castShadow receiveShadow>
                <cylinderGeometry args={[0.2, 0.3, 0.6, 16]} rotation={[Math.PI / 2, 0, 0]} />
                <meshStandardMaterial color={baseColor} />
              </mesh>
              <mesh position={[0, 0.3, -0.5]} castShadow receiveShadow>
                <cylinderGeometry args={[0.3, 0.25, 0.5, 16]} rotation={[Math.PI / 2, 0, 0]} />
                <meshStandardMaterial color={baseColor} />
              </mesh>
              <mesh position={[0, 0.3, -1]} castShadow receiveShadow>
                <cylinderGeometry args={[0.25, 0.15, 0.5, 16]} rotation={[Math.PI / 2, 0, 0]} />
                <meshStandardMaterial color={baseColor} />
              </mesh>
              <mesh position={[0, 0.3, -1.5]} castShadow receiveShadow>
                <cylinderGeometry args={[0.15, 0.05, 0.5, 16]} rotation={[Math.PI / 2, 0, 0]} />
                <meshStandardMaterial color={baseColor} />
              </mesh>
              
              {/* Patterns on the snake */}
              <mesh position={[0, 0.5, 0]} castShadow>
                <boxGeometry args={[0.4, 0.05, 0.4]} />
                <meshStandardMaterial color="black" />
              </mesh>
              <mesh position={[0, 0.5, -0.8]} castShadow>
                <boxGeometry args={[0.3, 0.05, 0.3]} />
                <meshStandardMaterial color="black" />
              </mesh>
            </group>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.3, 0.4]} castShadow receiveShadow>
              <sphereGeometry args={[0.25, 16, 16]} />
              <meshStandardMaterial color={baseColor} />
              
              {/* Eyes - snake-like */}
              <group position={[0, 0.1, 0.2]}>
                {/* Left eye */}
                <mesh position={[-0.1, 0, 0]}>
                  <sphereGeometry args={[0.06, 16, 16]} />
                  <meshBasicMaterial color="yellow" />
                  
                  {/* Slit pupil */}
                  <mesh position={[0, 0, 0.04]} rotation={[0, 0, Math.PI / 2]}>
                    <planeGeometry args={[0.03, 0.09]} />
                    <meshBasicMaterial color="black" side={THREE.DoubleSide} />
                  </mesh>
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.1, 0, 0]}>
                  <sphereGeometry args={[0.06, 16, 16]} />
                  <meshBasicMaterial color="yellow" />
                  
                  {/* Slit pupil */}
                  <mesh position={[0, 0, 0.04]} rotation={[0, 0, Math.PI / 2]}>
                    <planeGeometry args={[0.03, 0.09]} />
                    <meshBasicMaterial color="black" side={THREE.DoubleSide} />
                  </mesh>
                </mesh>
              </group>
              
              {/* Snake tongue */}
              <group position={[0, -0.05, 0.3]}>
                <mesh position={[0, 0, 0]}>
                  <boxGeometry args={[0.02, 0.02, 0.1]} />
                  <meshBasicMaterial color="red" />
                </mesh>
                <mesh position={[0.05, 0, 0.1]}>
                  <boxGeometry args={[0.1, 0.01, 0.01]} />
                  <meshBasicMaterial color="red" />
                </mesh>
                <mesh position={[-0.05, 0, 0.1]}>
                  <boxGeometry args={[0.1, 0.01, 0.01]} />
                  <meshBasicMaterial color="red" />
                </mesh>
              </group>
            </mesh>
          </>
        );
        
      default:
        // Generic enemy
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.5, 0]} castShadow receiveShadow>
              <boxGeometry args={[0.7, 0.7, 0.7]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 1, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.4, 16, 16]} />
              <meshStandardMaterial color={baseColor} />
              
              {/* Eyes */}
              <group position={[0, 0, 0.3]}>
                {/* Left eye */}
                <mesh position={[-0.15, 0.1, 0]}>
                  <sphereGeometry args={[0.1, 16, 16]} />
                  <meshBasicMaterial color="red" />
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.15, 0.1, 0]}>
                  <sphereGeometry args={[0.1, 16, 16]} />
                  <meshBasicMaterial color="red" />
                </mesh>
              </group>
              
              {/* Mouth */}
              <mesh position={[0, -0.1, 0.3]}>
                <boxGeometry args={[0.3, 0.1, 0.05]} />
                <meshBasicMaterial color="black" />
              </mesh>
            </mesh>
            
            {/* Limbs */}
            <mesh position={[-0.5, 0.5, 0]}>
              <boxGeometry args={[0.3, 0.3, 0.3]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[0.5, 0.5, 0]}>
              <boxGeometry args={[0.3, 0.3, 0.3]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[-0.3, 0, 0]}>
              <boxGeometry args={[0.3, 0.5, 0.3]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
            <mesh position={[0.3, 0, 0]}>
              <boxGeometry args={[0.3, 0.5, 0.3]} />
              <meshStandardMaterial color={baseColor} />
            </mesh>
          </>
        );
    }
  };
  
  return (
    <group 
      ref={group} 
      scale={[scale * levelScale, scale * levelScale, scale * levelScale]}
    >
      {renderEnemy()}
      
      {/* Level indicator stars */}
      {Array.from({ length: level }).map((_, index) => (
        <mesh 
          key={index} 
          position={[
            0.3 * (index - (level - 1) / 2), 
            1.5, 
            0
          ]}
          rotation={[0, 0, Math.PI / 4]}
        >
          <boxGeometry args={[0.1, 0.1, 0.1]} />
          <meshStandardMaterial color="yellow" emissive="yellow" emissiveIntensity={0.5} />
        </mesh>
      ))}
    </group>
  );
};

export default Enemy;

================
File: client/src/game/components/models/Environment.tsx
================
import React, { useRef, useMemo } from "react";
import * as THREE from "three";
import { useTexture } from "@react-three/drei";

const Environment: React.FC = () => {
  // Load textures
  const grassTexture = useTexture("/textures/grass.png");
  grassTexture.repeat.set(5, 5);
  grassTexture.wrapS = grassTexture.wrapT = 1000;
  
  const woodTexture = useTexture("/textures/wood.jpg");
  woodTexture.repeat.set(1, 1);
  woodTexture.wrapS = woodTexture.wrapT = 1000;
  
  // Generate clouds
  const clouds = useMemo(() => {
    return Array.from({ length: 10 }, (_, i) => ({
      position: [
        (Math.random() - 0.5) * 40,
        5 + Math.random() * 5,
        (Math.random() - 0.5) * 40
      ],
      scale: 1 + Math.random() * 2,
      rotation: Math.random() * Math.PI
    }));
  }, []);
  
  // Generate trees
  const trees = useMemo(() => {
    return Array.from({ length: 15 }, (_, i) => ({
      position: [
        (Math.random() - 0.5) * 40,
        0,
        (Math.random() - 0.5) * 40
      ],
      scale: 0.8 + Math.random() * 0.5,
      rotation: Math.random() * Math.PI * 2
    }));
  }, []);
  
  // Generate rocks
  const rocks = useMemo(() => {
    return Array.from({ length: 12 }, (_, i) => ({
      position: [
        (Math.random() - 0.5) * 30,
        0,
        (Math.random() - 0.5) * 30
      ],
      scale: 0.5 + Math.random() * 0.5,
      rotation: Math.random() * Math.PI * 2
    }));
  }, []);
  
  // Generate flowers
  const flowers = useMemo(() => {
    return Array.from({ length: 20 }, (_, i) => ({
      position: [
        (Math.random() - 0.5) * 30,
        0,
        (Math.random() - 0.5) * 30
      ],
      color: [
        "#FF5252", // Red
        "#FF4081", // Pink
        "#7C4DFF", // Purple
        "#FFEB3B", // Yellow
        "#FFFFFF"  // White
      ][Math.floor(Math.random() * 5)],
      rotation: Math.random() * Math.PI * 2
    }));
  }, []);
  
  return (
    <group>
      {/* Trees */}
      {trees.map((tree, index) => (
        <group 
          key={`tree-${index}`} 
          position={tree.position as [number, number, number]} 
          scale={[tree.scale, tree.scale, tree.scale]} 
          rotation={[0, tree.rotation, 0]}
        >
          {/* Tree trunk */}
          <mesh position={[0, 1, 0]} castShadow>
            <cylinderGeometry args={[0.2, 0.3, 2, 8]} />
            <meshStandardMaterial map={woodTexture} color="#8D6E63" />
          </mesh>
          
          {/* Tree leaves */}
          <mesh position={[0, 2.5, 0]} castShadow>
            <coneGeometry args={[1, 2, 8]} />
            <meshStandardMaterial color="#AED581" />
          </mesh>
        </group>
      ))}
      
      {/* Rocks */}
      {rocks.map((rock, index) => (
        <group
          key={`rock-${index}`}
          position={rock.position as [number, number, number]}
          scale={[rock.scale, rock.scale, rock.scale]}
          rotation={[0, rock.rotation, 0]}
        >
          <mesh position={[0, 0.2, 0]} castShadow>
            <sphereGeometry args={[0.5, 6, 6]} />
            <meshStandardMaterial color="#9E9E9E" roughness={0.8} />
          </mesh>
        </group>
      ))}
      
      {/* Flowers */}
      {flowers.map((flower, index) => (
        <group
          key={`flower-${index}`}
          position={flower.position as [number, number, number]}
          rotation={[0, flower.rotation, 0]}
        >
          {/* Stem */}
          <mesh position={[0, 0.15, 0]} castShadow>
            <cylinderGeometry args={[0.02, 0.02, 0.3, 8]} />
            <meshStandardMaterial color="#7CB342" />
          </mesh>
          
          {/* Flower */}
          <mesh position={[0, 0.3, 0]} castShadow>
            <sphereGeometry args={[0.1, 8, 8]} />
            <meshStandardMaterial color={flower.color} />
          </mesh>
        </group>
      ))}
      
      {/* Clouds */}
      {clouds.map((cloud, index) => (
        <group
          key={`cloud-${index}`}
          position={cloud.position as [number, number, number]}
          scale={[cloud.scale, cloud.scale, cloud.scale]}
          rotation={[0, cloud.rotation, 0]}
        >
          <mesh castShadow>
            <sphereGeometry args={[0.8, 8, 8]} />
            <meshStandardMaterial color="white" />
          </mesh>
          <mesh position={[0.7, 0, 0]} castShadow>
            <sphereGeometry args={[0.6, 8, 8]} />
            <meshStandardMaterial color="white" />
          </mesh>
          <mesh position={[-0.7, 0, 0]} castShadow>
            <sphereGeometry args={[0.6, 8, 8]} />
            <meshStandardMaterial color="white" />
          </mesh>
          <mesh position={[0, 0, 0.7]} castShadow>
            <sphereGeometry args={[0.7, 8, 8]} />
            <meshStandardMaterial color="white" />
          </mesh>
          <mesh position={[0, 0.5, 0]} castShadow>
            <sphereGeometry args={[0.7, 8, 8]} />
            <meshStandardMaterial color="white" />
          </mesh>
        </group>
      ))}
    </group>
  );
};

export default Environment;

================
File: client/src/game/components/models/Pet.tsx
================
import React, { useRef } from "react";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
import { PetType } from "../../types";

interface PetProps {
  type: PetType;
  color?: string;
  scale?: number;
}

const Pet: React.FC<PetProps> = ({ 
  type, 
  color = "#FFFFFF", 
  scale = 1 
}) => {
  const group = useRef<THREE.Group>(null);
  const bodyRef = useRef<THREE.Mesh>(null);
  const headRef = useRef<THREE.Mesh>(null);
  
  // Animate pet with cute movements
  useFrame(({ clock }) => {
    const t = clock.getElapsedTime();
    
    if (group.current) {
      // Subtle bobbing
      group.current.position.y = Math.sin(t * 2) * 0.05;
    }
    
    if (bodyRef.current) {
      // Subtle breathing motion
      bodyRef.current.scale.x = 1 + Math.sin(t * 2) * 0.03;
      bodyRef.current.scale.z = 1 + Math.sin(t * 2) * 0.03;
    }
    
    if (headRef.current) {
      // Cute head movements
      headRef.current.rotation.y = Math.sin(t * 1) * 0.2;
      headRef.current.rotation.z = Math.sin(t * 1.5) * 0.05;
    }
  });
  
  // Render different pet types
  const renderPet = () => {
    switch (type) {
      case PetType.dog:
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.3, 0]} castShadow receiveShadow>
              <boxGeometry args={[0.6, 0.4, 0.8]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.5, 0.4]} castShadow receiveShadow>
              <boxGeometry args={[0.5, 0.4, 0.5]} />
              <meshStandardMaterial color={color} />
              
              {/* Eyes */}
              <group position={[0, 0, 0.26]}>
                {/* Left eye */}
                <mesh position={[-0.12, 0.05, 0]}>
                  <sphereGeometry args={[0.05, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.12, 0.05, 0]}>
                  <sphereGeometry args={[0.05, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </group>
              
              {/* Nose */}
              <mesh position={[0, -0.05, 0.26]}>
                <sphereGeometry args={[0.08, 16, 16]} />
                <meshStandardMaterial color="#333333" />
              </mesh>
              
              {/* Ears */}
              <mesh position={[-0.2, 0.2, 0]} rotation={[0, 0, -0.3]} castShadow>
                <boxGeometry args={[0.1, 0.2, 0.1]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[0.2, 0.2, 0]} rotation={[0, 0, 0.3]} castShadow>
                <boxGeometry args={[0.1, 0.2, 0.1]} />
                <meshStandardMaterial color={color} />
              </mesh>
            </mesh>
            
            {/* Tail */}
            <mesh position={[0, 0.3, -0.5]} rotation={[0.5, 0, 0]} castShadow>
              <boxGeometry args={[0.1, 0.1, 0.4]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.2, 0, 0.3]} castShadow>
              <boxGeometry args={[0.1, 0.3, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.2, 0, 0.3]} castShadow>
              <boxGeometry args={[0.1, 0.3, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[-0.2, 0, -0.3]} castShadow>
              <boxGeometry args={[0.1, 0.3, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.2, 0, -0.3]} castShadow>
              <boxGeometry args={[0.1, 0.3, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
          </>
        );
        
      case PetType.cat:
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.3, 0]} castShadow receiveShadow>
              <boxGeometry args={[0.5, 0.4, 0.7]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.5, 0.35]} castShadow receiveShadow>
              <boxGeometry args={[0.4, 0.35, 0.4]} />
              <meshStandardMaterial color={color} />
              
              {/* Eyes */}
              <group position={[0, 0, 0.21]}>
                {/* Left eye */}
                <mesh position={[-0.1, 0.05, 0]}>
                  <sphereGeometry args={[0.04, 16, 16]} />
                  <meshBasicMaterial color="green" />
                  
                  {/* Pupil */}
                  <mesh position={[0, 0, 0.03]}>
                    <sphereGeometry args={[0.02, 16, 16]} />
                    <meshBasicMaterial color="black" />
                  </mesh>
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.1, 0.05, 0]}>
                  <sphereGeometry args={[0.04, 16, 16]} />
                  <meshBasicMaterial color="green" />
                  
                  {/* Pupil */}
                  <mesh position={[0, 0, 0.03]}>
                    <sphereGeometry args={[0.02, 16, 16]} />
                    <meshBasicMaterial color="black" />
                  </mesh>
                </mesh>
              </group>
              
              {/* Nose */}
              <mesh position={[0, -0.05, 0.21]}>
                <boxGeometry args={[0.05, 0.05, 0.05]} />
                <meshStandardMaterial color="#FF9E80" />
              </mesh>
              
              {/* Ears - triangular for cats */}
              <mesh position={[-0.15, 0.2, 0]} rotation={[0, 0, Math.PI / 4]} castShadow>
                <coneGeometry args={[0.1, 0.2, 4]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[0.15, 0.2, 0]} rotation={[0, 0, -Math.PI / 4]} castShadow>
                <coneGeometry args={[0.1, 0.2, 4]} />
                <meshStandardMaterial color={color} />
              </mesh>
            </mesh>
            
            {/* Tail - curvy for cats */}
            <mesh position={[0, 0.3, -0.45]} rotation={[0.8, 0, 0]} castShadow>
              <cylinderGeometry args={[0.05, 0.05, 0.5, 8]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.15, 0, 0.25]} castShadow>
              <boxGeometry args={[0.1, 0.3, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.15, 0, 0.25]} castShadow>
              <boxGeometry args={[0.1, 0.3, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[-0.15, 0, -0.25]} castShadow>
              <boxGeometry args={[0.1, 0.3, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.15, 0, -0.25]} castShadow>
              <boxGeometry args={[0.1, 0.3, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
          </>
        );
        
      case PetType.rabbit:
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.3, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.3, 16, 16]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.5, 0.3]} castShadow receiveShadow>
              <sphereGeometry args={[0.25, 16, 16]} />
              <meshStandardMaterial color={color} />
              
              {/* Eyes */}
              <group position={[0, 0, 0.2]}>
                {/* Left eye */}
                <mesh position={[-0.1, 0.05, 0]}>
                  <sphereGeometry args={[0.05, 16, 16]} />
                  <meshBasicMaterial color="#F44336" />
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.1, 0.05, 0]}>
                  <sphereGeometry args={[0.05, 16, 16]} />
                  <meshBasicMaterial color="#F44336" />
                </mesh>
              </group>
              
              {/* Nose */}
              <mesh position={[0, -0.05, 0.24]}>
                <sphereGeometry args={[0.05, 16, 16]} />
                <meshStandardMaterial color="#FF9E80" />
              </mesh>
              
              {/* Ears - long for rabbits */}
              <mesh position={[-0.1, 0.25, 0]} rotation={[0, 0, -0.2]} castShadow>
                <boxGeometry args={[0.07, 0.4, 0.07]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[0.1, 0.25, 0]} rotation={[0, 0, 0.2]} castShadow>
                <boxGeometry args={[0.07, 0.4, 0.07]} />
                <meshStandardMaterial color={color} />
              </mesh>
            </mesh>
            
            {/* Tail - small and round for rabbits */}
            <mesh position={[0, 0.25, -0.35]} castShadow>
              <sphereGeometry args={[0.1, 16, 16]} />
              <meshStandardMaterial color="white" />
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.15, 0, 0.15]} castShadow>
              <boxGeometry args={[0.1, 0.2, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.15, 0, 0.15]} castShadow>
              <boxGeometry args={[0.1, 0.2, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[-0.15, 0, -0.15]} castShadow>
              <boxGeometry args={[0.1, 0.2, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.15, 0, -0.15]} castShadow>
              <boxGeometry args={[0.1, 0.2, 0.1]} />
              <meshStandardMaterial color={color} />
            </mesh>
          </>
        );
        
      case PetType.bird:
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.3, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.25, 16, 16]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.6, 0.15]} castShadow receiveShadow>
              <sphereGeometry args={[0.2, 16, 16]} />
              <meshStandardMaterial color={color} />
              
              {/* Eyes */}
              <group position={[0, 0, 0.15]}>
                {/* Left eye */}
                <mesh position={[-0.08, 0.02, 0]}>
                  <sphereGeometry args={[0.04, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.08, 0.02, 0]}>
                  <sphereGeometry args={[0.04, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </group>
              
              {/* Beak */}
              <mesh position={[0, -0.05, 0.2]} rotation={[0, 0, 0]} castShadow>
                <coneGeometry args={[0.05, 0.15, 4]} rotation={[0, 0, Math.PI / 4]} />
                <meshStandardMaterial color="#FF9800" />
              </mesh>
            </mesh>
            
            {/* Wings */}
            <mesh position={[-0.25, 0.3, 0]} rotation={[0, 0, -0.3]} castShadow>
              <boxGeometry args={[0.25, 0.05, 0.3]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.25, 0.3, 0]} rotation={[0, 0, 0.3]} castShadow>
              <boxGeometry args={[0.25, 0.05, 0.3]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Tail */}
            <mesh position={[0, 0.25, -0.25]} rotation={[0.3, 0, 0]} castShadow>
              <boxGeometry args={[0.2, 0.05, 0.15]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.07, 0, 0]} castShadow>
              <boxGeometry args={[0.03, 0.15, 0.03]} />
              <meshStandardMaterial color="#FF9800" />
            </mesh>
            <mesh position={[0.07, 0, 0]} castShadow>
              <boxGeometry args={[0.03, 0.15, 0.03]} />
              <meshStandardMaterial color="#FF9800" />
            </mesh>
          </>
        );
        
      case PetType.frog:
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.15, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.25, 16, 16]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.25, 0.2]} castShadow receiveShadow>
              <sphereGeometry args={[0.2, 16, 16]} />
              <meshStandardMaterial color={color} />
              
              {/* Eyes - bulging for frogs */}
              <mesh position={[-0.1, 0.12, 0.05]} castShadow>
                <sphereGeometry args={[0.08, 16, 16]} />
                <meshStandardMaterial color="white" />
                
                {/* Pupil */}
                <mesh position={[0, 0, 0.06]}>
                  <sphereGeometry args={[0.04, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </mesh>
              <mesh position={[0.1, 0.12, 0.05]} castShadow>
                <sphereGeometry args={[0.08, 16, 16]} />
                <meshStandardMaterial color="white" />
                
                {/* Pupil */}
                <mesh position={[0, 0, 0.06]}>
                  <sphereGeometry args={[0.04, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </mesh>
              
              {/* Mouth */}
              <mesh position={[0, -0.05, 0.15]} castShadow>
                <boxGeometry args={[0.15, 0.02, 0.05]} />
                <meshStandardMaterial color="#E57373" />
              </mesh>
            </mesh>
            
            {/* Front legs */}
            <mesh position={[-0.2, 0, 0.1]} rotation={[0, 0.3, 0]} castShadow>
              <boxGeometry args={[0.1, 0.05, 0.2]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.2, 0, 0.1]} rotation={[0, -0.3, 0]} castShadow>
              <boxGeometry args={[0.1, 0.05, 0.2]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Back legs - stronger for jumping */}
            <mesh position={[-0.15, 0, -0.2]} rotation={[0, 0.5, 0]} castShadow>
              <boxGeometry args={[0.1, 0.05, 0.3]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.15, 0, -0.2]} rotation={[0, -0.5, 0]} castShadow>
              <boxGeometry args={[0.1, 0.05, 0.3]} />
              <meshStandardMaterial color={color} />
            </mesh>
          </>
        );
        
      case PetType.turtle:
        return (
          <>
            {/* Shell */}
            <mesh ref={bodyRef} position={[0, 0.2, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.3, 16, 16]} />
              <meshStandardMaterial color="#8D6E63" />
              
              {/* Shell pattern */}
              <mesh position={[0, 0.2, 0]} castShadow>
                <boxGeometry args={[0.2, 0.05, 0.2]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[0, 0, 0.2]} castShadow>
                <boxGeometry args={[0.2, 0.05, 0.05]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[0, 0, -0.2]} castShadow>
                <boxGeometry args={[0.2, 0.05, 0.05]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[0.2, 0, 0]} castShadow>
                <boxGeometry args={[0.05, 0.05, 0.2]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[-0.2, 0, 0]} castShadow>
                <boxGeometry args={[0.05, 0.05, 0.2]} />
                <meshStandardMaterial color={color} />
              </mesh>
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.2, 0.35]} castShadow receiveShadow>
              <boxGeometry args={[0.15, 0.15, 0.2]} />
              <meshStandardMaterial color="#8D6E63" />
              
              {/* Eyes */}
              <group position={[0, 0, 0.1]}>
                {/* Left eye */}
                <mesh position={[-0.05, 0.05, 0]}>
                  <sphereGeometry args={[0.02, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.05, 0.05, 0]}>
                  <sphereGeometry args={[0.02, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </group>
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.2, 0, 0.2]} castShadow>
              <boxGeometry args={[0.1, 0.05, 0.15]} />
              <meshStandardMaterial color="#8D6E63" />
            </mesh>
            <mesh position={[0.2, 0, 0.2]} castShadow>
              <boxGeometry args={[0.1, 0.05, 0.15]} />
              <meshStandardMaterial color="#8D6E63" />
            </mesh>
            <mesh position={[-0.2, 0, -0.2]} castShadow>
              <boxGeometry args={[0.1, 0.05, 0.15]} />
              <meshStandardMaterial color="#8D6E63" />
            </mesh>
            <mesh position={[0.2, 0, -0.2]} castShadow>
              <boxGeometry args={[0.1, 0.05, 0.15]} />
              <meshStandardMaterial color="#8D6E63" />
            </mesh>
            
            {/* Tail */}
            <mesh position={[0, 0.1, -0.35]} castShadow>
              <boxGeometry args={[0.05, 0.05, 0.1]} />
              <meshStandardMaterial color="#8D6E63" />
            </mesh>
          </>
        );
        
      case PetType.fish:
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.3, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.25, 16, 16]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.3, 0.2]} castShadow receiveShadow>
              <sphereGeometry args={[0.2, 16, 16]} />
              <meshStandardMaterial color={color} />
              
              {/* Eyes */}
              <group position={[0, 0, 0.15]}>
                {/* Left eye */}
                <mesh position={[-0.1, 0.05, 0]}>
                  <sphereGeometry args={[0.05, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.1, 0.05, 0]}>
                  <sphereGeometry args={[0.05, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </group>
              
              {/* Mouth */}
              <mesh position={[0, -0.05, 0.18]} castShadow>
                <sphereGeometry args={[0.05, 16, 16]} />
                <meshStandardMaterial color="#EF5350" />
              </mesh>
            </mesh>
            
            {/* Tail */}
            <mesh position={[0, 0.3, -0.3]} rotation={[0, 0, Math.PI / 2]} castShadow>
              <coneGeometry args={[0.2, 0.3, 2]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Fins */}
            <mesh position={[0, 0.5, 0]} rotation={[0, 0, 0]} castShadow>
              <coneGeometry args={[0.1, 0.2, 2]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[-0.25, 0.3, 0]} rotation={[0, 0, Math.PI / 2]} castShadow>
              <coneGeometry args={[0.1, 0.2, 2]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.25, 0.3, 0]} rotation={[0, 0, -Math.PI / 2]} castShadow>
              <coneGeometry args={[0.1, 0.2, 2]} />
              <meshStandardMaterial color={color} />
            </mesh>
          </>
        );
        
      case PetType.hamster:
        return (
          <>
            {/* Body */}
            <mesh ref={bodyRef} position={[0, 0.2, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.25, 16, 16]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Head */}
            <mesh ref={headRef} position={[0, 0.3, 0.25]} castShadow receiveShadow>
              <sphereGeometry args={[0.2, 16, 16]} />
              <meshStandardMaterial color={color} />
              
              {/* Eyes */}
              <group position={[0, 0, 0.15]}>
                {/* Left eye */}
                <mesh position={[-0.08, 0.05, 0]}>
                  <sphereGeometry args={[0.03, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
                
                {/* Right eye */}
                <mesh position={[0.08, 0.05, 0]}>
                  <sphereGeometry args={[0.03, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </group>
              
              {/* Nose */}
              <mesh position={[0, 0, 0.19]} castShadow>
                <sphereGeometry args={[0.04, 16, 16]} />
                <meshStandardMaterial color="#FF9E80" />
              </mesh>
              
              {/* Cheeks - puffy for hamsters */}
              <mesh position={[-0.15, 0, 0.05]} castShadow>
                <sphereGeometry args={[0.08, 16, 16]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[0.15, 0, 0.05]} castShadow>
                <sphereGeometry args={[0.08, 16, 16]} />
                <meshStandardMaterial color={color} />
              </mesh>
              
              {/* Ears */}
              <mesh position={[-0.1, 0.15, 0]} rotation={[0, 0, -0.3]} castShadow>
                <sphereGeometry args={[0.05, 16, 16]} />
                <meshStandardMaterial color={color} />
              </mesh>
              <mesh position={[0.1, 0.15, 0]} rotation={[0, 0, 0.3]} castShadow>
                <sphereGeometry args={[0.05, 16, 16]} />
                <meshStandardMaterial color={color} />
              </mesh>
            </mesh>
            
            {/* Tail - tiny for hamsters */}
            <mesh position={[0, 0.15, -0.25]} castShadow>
              <sphereGeometry args={[0.05, 16, 16]} />
              <meshStandardMaterial color={color} />
            </mesh>
            
            {/* Legs */}
            <mesh position={[-0.15, 0, 0.15]} castShadow>
              <boxGeometry args={[0.08, 0.1, 0.08]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.15, 0, 0.15]} castShadow>
              <boxGeometry args={[0.08, 0.1, 0.08]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[-0.15, 0, -0.15]} castShadow>
              <boxGeometry args={[0.08, 0.1, 0.08]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh position={[0.15, 0, -0.15]} castShadow>
              <boxGeometry args={[0.08, 0.1, 0.08]} />
              <meshStandardMaterial color={color} />
            </mesh>
          </>
        );
        
      default:
        // Fallback to a simple pet shape
        return (
          <>
            <mesh ref={bodyRef} position={[0, 0.3, 0]} castShadow receiveShadow>
              <sphereGeometry args={[0.3, 16, 16]} />
              <meshStandardMaterial color={color} />
            </mesh>
            <mesh ref={headRef} position={[0, 0.5, 0.3]} castShadow receiveShadow>
              <sphereGeometry args={[0.2, 16, 16]} />
              <meshStandardMaterial color={color} />
              
              {/* Eyes */}
              <group position={[0, 0, 0.15]}>
                <mesh position={[-0.08, 0.05, 0]}>
                  <sphereGeometry args={[0.04, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
                <mesh position={[0.08, 0.05, 0]}>
                  <sphereGeometry args={[0.04, 16, 16]} />
                  <meshBasicMaterial color="black" />
                </mesh>
              </group>
            </mesh>
          </>
        );
    }
  };
  
  return (
    <group ref={group} scale={[scale, scale, scale]}>
      {renderPet()}
    </group>
  );
};

export default Pet;

================
File: client/src/game/components/ui/GameButton.tsx
================
import React from "react";
import { cn } from "../../../lib/utils";

interface GameButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "secondary" | "accent" | "outline";
  size?: "sm" | "md" | "lg";
  icon?: React.ReactNode;
  iconPosition?: "left" | "right";
}

const GameButton: React.FC<GameButtonProps> = ({
  children,
  className,
  variant = "primary",
  size = "md",
  icon,
  iconPosition = "left",
  ...props
}) => {
  // Base styles for all buttons
  const baseStyles = "game-button font-fredoka font-bold rounded-full transition-all duration-200 shadow-md hover:shadow-lg active:scale-95 focus:outline-none focus:ring-4 flex items-center justify-center";
  
  // Variant styles
  const variantStyles = {
    primary: "bg-primary text-white hover:bg-primary/90 focus:ring-primary/50",
    secondary: "bg-secondary text-white hover:bg-secondary/90 focus:ring-secondary/50",
    accent: "bg-accent text-white hover:bg-accent/90 focus:ring-accent/50",
    outline: "bg-transparent text-foreground border-2 border-primary hover:bg-primary/10 focus:ring-primary/30",
  };
  
  // Size styles
  const sizeStyles = {
    sm: "text-sm py-2 px-4",
    md: "text-base py-3 px-6",
    lg: "text-lg py-4 px-8",
  };
  
  return (
    <button
      className={cn(
        baseStyles,
        variantStyles[variant],
        sizeStyles[size],
        className
      )}
      {...props}
    >
      {icon && iconPosition === "left" && (
        <span className="mr-2">{icon}</span>
      )}
      {children}
      {icon && iconPosition === "right" && (
        <span className="ml-2">{icon}</span>
      )}
    </button>
  );
};

export default GameButton;

================
File: client/src/game/components/ui/GameCard.tsx
================
import React from "react";
import { cn } from "../../../lib/utils";

interface GameCardProps {
  children: React.ReactNode;
  className?: string;
  variant?: "default" | "outline" | "secondary" | "accent";
  hoverable?: boolean;
}

const GameCard: React.FC<GameCardProps> = ({
  children,
  className,
  variant = "default",
  hoverable = false,
}) => {
  // Base styles
  const baseStyles = "game-card rounded-2xl shadow-lg overflow-hidden";
  
  // Variant styles
  const variantStyles = {
    default: "bg-white border-4 border-primary",
    outline: "bg-white border-4 border-gray-200",
    secondary: "bg-white border-4 border-secondary",
    accent: "bg-white border-4 border-accent",
  };
  
  // Hover effect
  const hoverStyles = hoverable ? "transition-all duration-300 hover:shadow-xl hover:-translate-y-1" : "";
  
  return (
    <div
      className={cn(
        baseStyles,
        variantStyles[variant],
        hoverStyles,
        className
      )}
    >
      {children}
    </div>
  );
};

// Card subcomponents
interface CardHeaderProps {
  children: React.ReactNode;
  className?: string;
  color?: "primary" | "secondary" | "accent" | "default";
}

const CardHeader: React.FC<CardHeaderProps> = ({
  children,
  className,
  color = "default",
}) => {
  const colorStyles = {
    primary: "bg-primary text-white",
    secondary: "bg-secondary text-white",
    accent: "bg-accent text-white",
    default: "bg-gray-100 text-foreground",
  };
  
  return (
    <div
      className={cn(
        "p-4 font-fredoka font-bold text-lg",
        colorStyles[color],
        className
      )}
    >
      {children}
    </div>
  );
};

interface CardContentProps {
  children: React.ReactNode;
  className?: string;
}

const CardContent: React.FC<CardContentProps> = ({
  children,
  className,
}) => {
  return (
    <div className={cn("p-4", className)}>
      {children}
    </div>
  );
};

interface CardFooterProps {
  children: React.ReactNode;
  className?: string;
}

const CardFooter: React.FC<CardFooterProps> = ({
  children,
  className,
}) => {
  return (
    <div className={cn("p-4 border-t border-gray-100", className)}>
      {children}
    </div>
  );
};

// Export the card and its parts
GameCard.Header = CardHeader;
GameCard.Content = CardContent;
GameCard.Footer = CardFooter;

export default GameCard;

================
File: client/src/game/components/ui/GameDialog.tsx
================
import React from "react";
import GameButton from "./GameButton";
import GameText from "./GameText";

interface GameDialogProps {
  title: string;
  message: string;
  onClose?: () => void;
  actions?: {
    label: string;
    onClick: () => void;
    variant?: "primary" | "secondary" | "accent" | "outline";
  }[];
}

const GameDialog: React.FC<GameDialogProps> = ({
  title,
  message,
  onClose,
  actions = [],
}) => {
  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-3xl shadow-lg border-4 border-primary max-w-md w-full animate-float">
        {/* Header */}
        <div className="p-4 bg-primary text-white">
          <GameText variant="heading" color="foreground" className="text-white">
            {title}
          </GameText>
        </div>
        
        {/* Message */}
        <div className="p-6">
          <GameText variant="body" comic className="whitespace-pre-line">
            {message}
          </GameText>
        </div>
        
        {/* Actions */}
        <div className="p-4 flex justify-end gap-3 border-t border-gray-100">
          {actions && actions.length > 0 ? (
            actions.map((action, index) => (
              <GameButton
                key={index}
                variant={action.variant || "primary"}
                onClick={action.onClick}
              >
                {action.label}
              </GameButton>
            ))
          ) : (
            <GameButton variant="primary" onClick={onClose}>
              Close
            </GameButton>
          )}
        </div>
      </div>
    </div>
  );
};

export default GameDialog;

================
File: client/src/game/components/ui/GameInterface.tsx
================
import React, { useEffect, useState } from "react";
import { useGameStore } from "../../stores/useGameStore";
import { usePlayerStore } from "../../stores/usePlayerStore";
import { usePetStore } from "../../stores/usePetStore";
import { useAudio } from "../../../lib/stores/useAudio";
import { cn } from "../../../lib/utils";
import Inventory from "../Inventory";

export function GameInterface() {
  const { gamePhase, showDialog, dialogContent, closeDialog, showInventory, toggleInventory } = useGameStore();
  const { player } = usePlayerStore();
  const { pet } = usePetStore();
  const { isMuted, toggleMute } = useAudio();
  
  const [showStats, setShowStats] = useState(false);
  
  // Hide inventory when game phase changes
  useEffect(() => {
    if (showInventory) {
      toggleInventory();
    }
  }, [gamePhase, showInventory, toggleInventory]);
  
  // Don't show interface during initial game phases
  if (gamePhase === "welcome" || 
      gamePhase === "age_verification" || 
      gamePhase === "character_creation" || 
      gamePhase === "pet_assignment") {
    return null;
  }
  
  return (
    <div className="fixed inset-0 pointer-events-none">
      {/* Top bar with player info */}
      <div className="absolute top-0 left-0 right-0 flex justify-between items-center p-3 pointer-events-auto">
        <div className="bg-gray-800/80 text-white p-2 rounded-lg flex items-center">
          <div className="h-8 w-8 rounded-full bg-blue-500" style={{ backgroundColor: player?.color || "#4FC3F7" }}></div>
          <div className="ml-2">
            <div className="font-bold">{player?.name || "Player"}</div>
            <div className="text-xs">Age: {player?.age || 10}</div>
          </div>
          <div className="ml-4 flex flex-col">
            <div className="flex items-center">
              <span className="text-xs mr-1">HP:</span>
              <div className="h-2 w-24 bg-gray-700 rounded-full overflow-hidden">
                <div 
                  className="h-full bg-red-500" 
                  style={{ 
                    width: `${player ? (player.health / player.maxHealth) * 100 : 0}%`,
                    backgroundColor: getHealthColor(player?.health, player?.maxHealth)
                  }}
                ></div>
              </div>
              <span className="text-xs ml-1">{player?.health}/{player?.maxHealth}</span>
            </div>
          </div>
        </div>
        
        {/* Pet info */}
        {pet && (
          <div className="bg-gray-800/80 text-white p-2 rounded-lg flex items-center">
            <div className="h-8 w-8 rounded-full" style={{ backgroundColor: pet.color }}></div>
            <div className="ml-2">
              <div className="font-bold">{pet.name}</div>
              <div className="text-xs">{capitalizeFirstLetter(pet.type)}</div>
            </div>
            <div className="ml-4 flex flex-col">
              <div className="flex items-center">
                <span className="text-xs mr-1">HP:</span>
                <div className="h-2 w-24 bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full" 
                    style={{ 
                      width: `${(pet.health / pet.maxHealth) * 100}%`,
                      backgroundColor: getHealthColor(pet.health, pet.maxHealth)
                    }}
                  ></div>
                </div>
                <span className="text-xs ml-1">{pet.health}/{pet.maxHealth}</span>
              </div>
              <div className="flex items-center mt-1">
                <span className="text-xs mr-1">Happiness:</span>
                <div className="h-2 w-24 bg-gray-700 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-yellow-500" 
                    style={{ width: `${pet.happiness}%` }}
                  ></div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div className="bg-gray-800/80 text-white p-2 rounded-lg">
          Coins: {player?.coins || 0}
        </div>
      </div>
      
      {/* Bottom bar with actions */}
      <div className="absolute bottom-0 left-0 right-0 flex justify-center items-center p-3 pointer-events-auto">
        <div className="bg-gray-800/80 text-white p-2 rounded-lg flex space-x-4">
          <button 
            className="px-3 py-1 bg-blue-500 rounded-md hover:bg-blue-600 transition"
            onClick={toggleInventory}
          >
            Inventory (I)
          </button>
          <button 
            className="px-3 py-1 bg-green-500 rounded-md hover:bg-green-600 transition"
            onClick={() => setShowStats(!showStats)}
          >
            Stats
          </button>
          <button 
            className={cn(
              "px-3 py-1 rounded-md transition",
              isMuted ? "bg-red-500 hover:bg-red-600" : "bg-green-500 hover:bg-green-600"
            )}
            onClick={toggleMute}
          >
            {isMuted ? "Unmute" : "Mute"}
          </button>
        </div>
      </div>
      
      {/* Stats panel */}
      {showStats && (
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-gray-800/90 text-white p-4 rounded-lg pointer-events-auto w-80">
          <h2 className="text-lg font-bold mb-2">Player Stats</h2>
          <div className="grid grid-cols-2 gap-2 mb-4">
            <div>Attack: {player?.attack}</div>
            <div>Defense: {player?.defense}</div>
          </div>
          
          <h2 className="text-lg font-bold mb-2">Pet Stats</h2>
          <div className="grid grid-cols-2 gap-2 mb-4">
            <div>Attack: {pet?.attack}</div>
            <div>Defense: {pet?.defense}</div>
            <div>Special: {pet?.specialAbility.name}</div>
            <div>Cooldown: {pet?.specialAbility.currentCooldown}/{pet?.specialAbility.cooldown}</div>
          </div>
          
          <div className="flex justify-center">
            <button 
              className="px-3 py-1 bg-blue-500 rounded-md hover:bg-blue-600 transition"
              onClick={() => setShowStats(false)}
            >
              Close
            </button>
          </div>
        </div>
      )}
      
      {/* Inventory */}
      {showInventory && <Inventory onClose={toggleInventory} />}
      
      {/* Dialog */}
      {showDialog && (
        <div className="absolute inset-0 bg-black/50 flex items-center justify-center pointer-events-auto">
          <div className="bg-white rounded-lg p-4 max-w-md w-full">
            <h2 className="text-xl font-bold mb-2">{dialogContent.title}</h2>
            <p className="mb-4">{dialogContent.message}</p>
            <div className="flex justify-end">
              <button 
                className="px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition"
                onClick={closeDialog}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// Helper functions
function getHealthColor(current?: number, max?: number) {
  if (!current || !max) return "#f87171"; // Default red
  
  const percentage = (current / max) * 100;
  if (percentage > 60) return "#4ade80"; // Green
  if (percentage > 30) return "#facc15"; // Yellow
  return "#f87171"; // Red
}

function capitalizeFirstLetter(string?: string) {
  if (!string) return "";
  return string.charAt(0).toUpperCase() + string.slice(1);
}

================
File: client/src/game/components/ui/GameText.tsx
================
import React from "react";
import { cn } from "../../../lib/utils";

interface GameTextProps {
  children: React.ReactNode;
  variant?: "title" | "subtitle" | "heading" | "body" | "caption";
  color?: "primary" | "secondary" | "accent" | "foreground" | "muted";
  align?: "left" | "center" | "right";
  className?: string;
  comic?: boolean;
}

const GameText: React.FC<GameTextProps> = ({
  children,
  variant = "body",
  color = "foreground",
  align = "left",
  className,
  comic = false,
}) => {
  // Font family
  const fontFamily = comic ? "font-comic" : "font-fredoka";
  
  // Variant styles
  const variantStyles = {
    title: "text-4xl font-bold",
    subtitle: "text-2xl font-bold",
    heading: "text-xl font-bold",
    body: "text-base",
    caption: "text-sm",
  };
  
  // Color styles
  const colorStyles = {
    primary: "text-primary",
    secondary: "text-secondary",
    accent: "text-accent",
    foreground: "text-foreground",
    muted: "text-muted-foreground",
  };
  
  // Text alignment
  const alignStyles = {
    left: "text-left",
    center: "text-center",
    right: "text-right",
  };
  
  // Determine which element to render based on variant
  const Component = 
    variant === "title" ? "h1" :
    variant === "subtitle" ? "h2" :
    variant === "heading" ? "h3" :
    variant === "caption" ? "p" :
    "p";
  
  return React.createElement(
    Component,
    {
      className: cn(
        fontFamily,
        variantStyles[variant],
        colorStyles[color],
        alignStyles[align],
        className
      ),
    },
    children
  );
};

export default GameText;

================
File: client/src/game/components/ui/LoadingScreen.tsx
================
import React from "react";

const LoadingScreen = () => {
  return (
    <div className="fixed inset-0 bg-blue-100 flex flex-col items-center justify-center">
      <div className="w-64 h-64 relative">
        {/* Pet silhouette */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="w-40 h-40 bg-blue-300 rounded-full opacity-60 animate-pulse"></div>
        </div>
        
        {/* Game title */}
        <div className="absolute top-4 left-0 right-0 text-center">
          <h1 className="text-3xl font-bold text-blue-800">Pet Adventure</h1>
          <p className="text-blue-600 mt-1">Loading your adventure...</p>
        </div>
        
        {/* Loading animation */}
        <div className="absolute bottom-8 left-0 right-0">
          <div className="w-48 h-2 mx-auto bg-blue-200 rounded-full overflow-hidden">
            <div className="h-full bg-blue-500 animate-loading-bar"></div>
          </div>
          <p className="text-center text-blue-600 mt-2 text-sm">Preparing your pet companion...</p>
        </div>
      </div>
    </div>
  );
};

export default LoadingScreen;

================
File: client/src/game/components/AgeVerification.tsx
================
import { useState, useRef } from "react";
import { Text, Html } from "@react-three/drei";
import { useTexture } from "@react-three/drei";
import { useGameStore } from "../stores/useGameStore";
import { MIN_AGE, MAX_AGE } from "../constants";
import { GamePhase } from "../types";

const AgeVerification = () => {
  const { setGamePhase } = useGameStore();
  const [age, setAge] = useState<string>("");
  const [error, setError] = useState<string>("");
  const inputRef = useRef<HTMLInputElement>(null);
  
  // Load textures
  const skyTexture = useTexture("/textures/sky.png");
  
  // Handle age change
  const handleAgeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    if (value === "" || /^\d+$/.test(value)) {
      setAge(value);
      setError("");
    }
  };
  
  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate age
    const numAge = parseInt(age, 10);
    
    if (isNaN(numAge)) {
      setError("Please enter your age");
      return;
    }
    
    if (numAge < MIN_AGE) {
      setError(`Sorry, you must be at least ${MIN_AGE} years old to play`);
      return;
    }
    
    if (numAge > MAX_AGE) {
      setError(`Please enter a valid age (up to ${MAX_AGE})`);
      return;
    }
    
    // Store age and proceed to character creation
    // You'd typically store this in your player state
    setGamePhase(GamePhase.character_creation);
  };
  
  return (
    <>
      {/* Sky backdrop */}
      <mesh position={[0, 0, -20]} scale={[40, 20, 1]}>
        <planeGeometry />
        <meshBasicMaterial map={skyTexture} />
      </mesh>
      
      {/* Lighting */}
      <ambientLight intensity={0.6} />
      <directionalLight position={[10, 10, 5]} intensity={1} />
      
      {/* Title */}
      <Text
        font="/fonts/inter.json"
        position={[0, 4, 0]}
        color="#424242"
        fontSize={1.2}
        maxWidth={10}
        lineHeight={1}
        textAlign="center"
        anchorX="center"
        anchorY="middle"
      >
        Before We Begin
      </Text>
      
      {/* Instruction text */}
      <Text
        font="/fonts/inter.json"
        position={[0, 2.5, 0]}
        color="#424242"
        fontSize={0.5}
        maxWidth={8}
        lineHeight={1.2}
        textAlign="center"
        anchorX="center"
        anchorY="middle"
      >
        {`To give you the best experience, please tell us your age (minimum ${MIN_AGE} years old)`}
      </Text>
      
      {/* Age input form */}
      <Html position={[0, 0.5, 0]} center transform>
        <form 
          onSubmit={handleSubmit}
          className="bg-white p-6 rounded-2xl shadow-lg w-80 border-4 border-primary"
        >
          <div className="mb-4">
            <label 
              htmlFor="age" 
              className="block font-fredoka text-lg text-foreground mb-2"
            >
              How old are you?
            </label>
            <input
              ref={inputRef}
              id="age"
              type="text"
              value={age}
              onChange={handleAgeChange}
              className="w-full p-3 border-2 border-primary rounded-full text-xl text-center font-fredoka focus:outline-none focus:ring-2 focus:ring-primary"
              autoFocus
              placeholder="Enter your age"
            />
            {error && (
              <p className="text-red-500 mt-2 text-sm font-fredoka">{error}</p>
            )}
          </div>
          
          <button
            type="submit"
            className="bubble-button w-full"
          >
            Continue
          </button>
        </form>
      </Html>
      
      {/* Decorative elements */}
      <group position={[-4, 0, 0]}>
        <mesh position={[0, 0.5, 0]} rotation={[0, Math.PI / 4, 0]}>
          <boxGeometry args={[1, 1, 1]} />
          <meshStandardMaterial color="#FFAB91" />
        </mesh>
      </group>
      
      <group position={[4, 0, 0]}>
        <mesh position={[0, 0.5, 0]} rotation={[0, Math.PI / 4, 0]}>
          <boxGeometry args={[1, 1, 1]} />
          <meshStandardMaterial color="#AED581" />
        </mesh>
      </group>
    </>
  );
};

export default AgeVerification;

================
File: client/src/game/components/Battle.tsx
================
import { useEffect, useRef } from "react";
import { useFrame, useThree } from "@react-three/fiber";
import * as THREE from "three";
import { useKeyboardControls, Text } from "@react-three/drei";
import { Controls, BattleState } from "../types";
import { useGameStore } from "../stores/useGameStore";
import { usePlayerStore } from "../stores/usePlayerStore";
import { usePetStore } from "../stores/usePetStore";
import { useBattleStore } from "../stores/useBattleStore";
import { useAudio } from "../../lib/stores/useAudio";
import Character from "./models/Character";
import Pet from "./models/Pet";
import Enemy from "./models/Enemy";
import { healthPercentage, healthColor } from "../utils/helpers";

const Battle = () => {
  const { camera } = useThree();
  const { player } = usePlayerStore();
  const { pet } = usePetStore();
  const { 
    battleState, 
    enemy, 
    availableActions, 
    performPlayerAction,
    resetBattle,
    turnCount
  } = useBattleStore();
  
  // References for animation
  const playerRef = useRef<THREE.Group>(null);
  const petRef = useRef<THREE.Group>(null);
  const enemyRef = useRef<THREE.Group>(null);
  const battleFieldRef = useRef<THREE.Group>(null);
  
  // Track active action
  const [, getKeys] = useKeyboardControls<Controls>();
  const selectedActionRef = useRef(0);
  
  // Set up battle scene
  useEffect(() => {
    // Position camera for battle view
    camera.position.set(0, 3, 10);
    camera.lookAt(0, 0, 0);
    
    return () => {
      // Reset battle state when component unmounts
      resetBattle();
    };
  }, [camera, resetBattle]);
  
  // Handle keyboard navigation for action selection
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (battleState !== BattleState.playerTurn) return;
      
      if (e.code === "ArrowUp" || e.code === "KeyW") {
        selectedActionRef.current = Math.max(0, selectedActionRef.current - 1);
      } else if (e.code === "ArrowDown" || e.code === "KeyS") {
        selectedActionRef.current = Math.min(availableActions.length - 1, selectedActionRef.current + 1);
      } else if (e.code === "Space" || e.code === "Enter") {
        performPlayerAction(selectedActionRef.current);
      }
    };
    
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [availableActions, battleState, performPlayerAction]);
  
  // Animate characters during battle
  useFrame(({ clock }) => {
    const time = clock.getElapsedTime();
    
    if (playerRef.current) {
      // Gentle hovering for player
      playerRef.current.position.y = Math.sin(time * 1.5) * 0.1 + 0.5;
      
      // If it's player's turn, make it bounce a bit more
      if (battleState === BattleState.playerTurn) {
        playerRef.current.position.y += Math.sin(time * 3) * 0.05;
      }
    }
    
    if (petRef.current && pet) {
      // Gentle hovering for pet
      petRef.current.position.y = Math.sin(time * 1.8 + 1) * 0.1 + 0.5;
      
      // If it's pet's turn, make it bounce a bit more
      if (battleState === BattleState.petTurn) {
        petRef.current.position.y += Math.sin(time * 3) * 0.05;
      }
    }
    
    if (enemyRef.current && enemy) {
      // More aggressive movement for enemy
      enemyRef.current.position.y = Math.sin(time * 2) * 0.15 + 0.6;
      
      // If it's enemy's turn, make it move forward slightly
      if (battleState === BattleState.enemyTurn) {
        enemyRef.current.position.z = Math.sin(time * 3) * 0.3 - 5;
      } else {
        enemyRef.current.position.z = -5;
      }
    }
    
    // Rotate the entire battlefield gently
    if (battleFieldRef.current) {
      battleFieldRef.current.rotation.y = Math.sin(time * 0.2) * 0.05;
    }
  });
  
  // Render health bars
  const renderHealthBar = (
    current: number, 
    max: number, 
    position: [number, number, number],
    width = 2
  ) => {
    const healthPct = healthPercentage(current, max);
    
    return (
      <group position={position}>
        {/* Background */}
        <mesh position={[0, 0, 0]}>
          <boxGeometry args={[width, 0.2, 0.05]} />
          <meshStandardMaterial color="#E0E0E0" />
        </mesh>
        
        {/* Health fill */}
        <mesh position={[-(width - width * healthPct / 100) / 2, 0, 0.01]}>
          <boxGeometry args={[width * healthPct / 100, 0.2, 0.05]} />
          <meshStandardMaterial color={healthColor(healthPct)} />
        </mesh>
      </group>
    );
  };
  
  // Determine what to render based on battle state
  const renderBattleStateMessage = () => {
    switch (battleState) {
      case BattleState.start:
        return "Battle starting...";
      case BattleState.playerTurn:
        return "Your turn! Choose an action.";
      case BattleState.petTurn:
        return `${pet?.name}'s turn!`;
      case BattleState.enemyTurn:
        return `${enemy?.name}'s turn!`;
      case BattleState.win:
        return "You won the battle!";
      case BattleState.lose:
        return "You lost the battle...";
      default:
        return "";
    }
  };
  
  return (
    <group ref={battleFieldRef}>
      {/* Battle arena */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]} receiveShadow>
        <planeGeometry args={[20, 20]} />
        <meshStandardMaterial color="#AED581" />
      </mesh>
      
      {/* Lighting */}
      <ambientLight intensity={0.6} />
      <directionalLight position={[5, 10, 2]} intensity={1} castShadow />
      
      {/* Battle state message */}
      <Text
        position={[0, 3, 0]}
        color="#424242"
        fontSize={0.7}
        font="/fonts/inter.json"
        anchorX="center"
        anchorY="middle"
      >
        {renderBattleStateMessage()}
      </Text>
      
      {/* Turn counter */}
      <Text
        position={[0, 2.5, 0]}
        color="#757575"
        fontSize={0.4}
        font="/fonts/inter.json"
        anchorX="center"
        anchorY="middle"
      >
        {`Turn: ${turnCount}`}
      </Text>
      
      {/* Player character */}
      <group ref={playerRef} position={[-3, 0.5, 0]}>
        <Character color={player.color} scale={1.2} />
        
        {/* Player name */}
        <Text
          position={[0, 1.8, 0]}
          color="#424242"
          fontSize={0.4}
          font="/fonts/inter.json"
          anchorX="center"
          anchorY="middle"
        >
          {player.name}
        </Text>
        
        {/* Player health bar */}
        {renderHealthBar(player.health, player.maxHealth, [0, 1.5, 0])}
      </group>
      
      {/* Pet character */}
      {pet && (
        <group ref={petRef} position={[-1.5, 0.5, 2]}>
          <Pet type={pet.type} color={pet.color} scale={1} />
          
          {/* Pet name */}
          <Text
            position={[0, 1.3, 0]}
            color="#424242"
            fontSize={0.3}
            font="/fonts/inter.json"
            anchorX="center"
            anchorY="middle"
          >
            {pet.name}
          </Text>
          
          {/* Pet health bar */}
          {renderHealthBar(pet.health, pet.maxHealth, [0, 1, 0], 1.5)}
        </group>
      )}
      
      {/* Enemy character */}
      {enemy && (
        <group ref={enemyRef} position={[3, 0.6, -5]}>
          <Enemy type={enemy.type} level={enemy.level} scale={1.5} />
          
          {/* Enemy name and level */}
          <Text
            position={[0, 2, 0]}
            color="#424242"
            fontSize={0.4}
            font="/fonts/inter.json"
            anchorX="center"
            anchorY="middle"
          >
            {`${enemy.name} Lv.${enemy.level}`}
          </Text>
          
          {/* Enemy health bar */}
          {renderHealthBar(enemy.health, enemy.maxHealth, [0, 1.7, 0], 2.5)}
        </group>
      )}
      
      {/* Battle actions (only shown during player turn) */}
      {battleState === BattleState.playerTurn && (
        <group position={[0, 0, 6]}>
          {availableActions.map((action, index) => {
            const isSelected = index === selectedActionRef.current;
            
            return (
              <group 
                key={action.name}
                position={[0, -index * 0.7, 0]}
                onClick={() => performPlayerAction(index)}
              >
                <mesh position={[0, 0, 0]}>
                  <boxGeometry args={[3, 0.6, 0.1]} />
                  <meshStandardMaterial color={isSelected ? "#4FC3F7" : "#E0E0E0"} />
                </mesh>
                
                <Text
                  position={[0, 0, 0.06]}
                  color={isSelected ? "white" : "#424242"}
                  fontSize={0.3}
                  font="/fonts/inter.json"
                  anchorX="center"
                  anchorY="middle"
                >
                  {action.name}
                </Text>
              </group>
            );
          })}
        </group>
      )}
    </group>
  );
};

export default Battle;

================
File: client/src/game/components/CharacterCreation.tsx
================
import { useState, useRef, useEffect } from "react";
import { useFrame } from "@react-three/fiber";
import { Text, Html } from "@react-three/drei";
import { useTexture } from "@react-three/drei";
import { useGameStore } from "../stores/useGameStore";
import { usePlayerStore } from "../stores/usePlayerStore";
import { GamePhase } from "../types";
import Character from "./models/Character";

const CharacterCreation = () => {
  const { setGamePhase } = useGameStore();
  const { setPlayerName, setPlayerAge, setPlayerColor } = usePlayerStore();
  const [name, setName] = useState<string>("");
  const [age, setAge] = useState<string>("");
  const [color, setColor] = useState<string>("#4FC3F7");
  const [error, setError] = useState<string>("");
  const characterRef = useRef<THREE.Group>(null);
  
  // Color options
  const colorOptions = [
    "#4FC3F7", // Primary blue
    "#FFAB91", // Secondary coral
    "#AED581", // Accent green
    "#FF80AB", // Pink
    "#FFD54F", // Yellow
    "#9575CD", // Purple
  ];
  
  // Load textures
  const skyTexture = useTexture("/textures/sky.png");
  
  // Rotate character slowly
  useFrame((_, delta) => {
    if (characterRef.current) {
      characterRef.current.rotation.y += delta * 0.5;
    }
  });
  
  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate inputs
    if (!name.trim()) {
      setError("Please enter your name");
      return;
    }
    
    if (name.length > 20) {
      setError("Name must be 20 characters or less");
      return;
    }
    
    if (!age || isNaN(parseInt(age))) {
      setError("Please enter a valid age");
      return;
    }
    
    const numAge = parseInt(age);
    if (numAge < 7 || numAge > 99) {
      setError("Age must be between 7 and 99");
      return;
    }
    
    // Save character data
    setPlayerName(name);
    setPlayerAge(numAge);
    setPlayerColor(color);
    
    // Move to pet assignment
    setGamePhase(GamePhase.pet_assignment);
  };
  
  // Pre-fill age if available from the previous screen
  useEffect(() => {
    // This would typically come from your player state
    // For now, we'll leave it empty
  }, []);
  
  return (
    <>
      {/* Sky backdrop */}
      <mesh position={[0, 0, -20]} scale={[40, 20, 1]}>
        <planeGeometry />
        <meshBasicMaterial map={skyTexture} />
      </mesh>
      
      {/* Lighting */}
      <ambientLight intensity={0.6} />
      <directionalLight position={[10, 10, 5]} intensity={1} castShadow />
      
      {/* Title */}
      <Text
        font="/fonts/inter.json"
        position={[0, 4, 0]}
        color="#424242"
        fontSize={1.2}
        maxWidth={10}
        lineHeight={1}
        textAlign="center"
        anchorX="center"
        anchorY="middle"
      >
        Create Your Character
      </Text>
      
      {/* Character preview */}
      <group ref={characterRef} position={[0, 1, -2]}>
        <Character color={color} />
      </group>
      
      {/* Character creation form */}
      <Html position={[0, 0, 0]} center transform>
        <form 
          onSubmit={handleSubmit}
          className="bg-white p-6 rounded-2xl shadow-lg w-80 border-4 border-primary"
        >
          <div className="mb-4">
            <label 
              htmlFor="name" 
              className="block font-fredoka text-lg text-foreground mb-2"
            >
              What's your name?
            </label>
            <input
              id="name"
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full p-3 border-2 border-primary rounded-full text-lg font-fredoka focus:outline-none focus:ring-2 focus:ring-primary"
              autoFocus
              placeholder="Enter your name"
            />
          </div>
          
          <div className="mb-4">
            <label 
              htmlFor="age" 
              className="block font-fredoka text-lg text-foreground mb-2"
            >
              How old are you?
            </label>
            <input
              id="age"
              type="text"
              value={age}
              onChange={(e) => {
                const value = e.target.value;
                if (value === "" || /^\d+$/.test(value)) {
                  setAge(value);
                }
              }}
              className="w-full p-3 border-2 border-primary rounded-full text-lg font-fredoka focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="Enter your age"
            />
          </div>
          
          <div className="mb-6">
            <label 
              className="block font-fredoka text-lg text-foreground mb-2"
            >
              Choose your favorite color:
            </label>
            <div className="flex flex-wrap gap-2 justify-center">
              {colorOptions.map((c) => (
                <button
                  key={c}
                  type="button"
                  className={`w-10 h-10 rounded-full border-2 ${
                    color === c ? "border-gray-800 scale-110" : "border-gray-300"
                  }`}
                  style={{ backgroundColor: c }}
                  onClick={() => setColor(c)}
                />
              ))}
            </div>
          </div>
          
          {error && (
            <p className="text-red-500 mb-4 text-sm font-fredoka">{error}</p>
          )}
          
          <button
            type="submit"
            className="bubble-button w-full"
          >
            Create Character
          </button>
        </form>
      </Html>
    </>
  );
};

export default CharacterCreation;

================
File: client/src/game/components/Environment.tsx
================
import { useTexture } from "@react-three/drei";

const Environment = () => {
  // Load ground texture
  const grassTexture = useTexture("/textures/grass.png");
  grassTexture.repeat.set(10, 10);
  grassTexture.wrapS = 1000;
  grassTexture.wrapT = 1000;
  
  return (
    <>
      {/* Sky */}
      <color attach="background" args={["#87CEEB"]} />
      
      {/* Ground */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]} receiveShadow>
        <planeGeometry args={[100, 100]} />
        <meshStandardMaterial 
          map={grassTexture} 
          color="#AED581"
        />
      </mesh>
      
      {/* Lighting */}
      <ambientLight intensity={0.6} />
      <directionalLight 
        position={[10, 10, 5]} 
        intensity={0.8} 
        castShadow 
        shadow-mapSize-width={2048} 
        shadow-mapSize-height={2048}
      />
      
      {/* Simple decorative elements */}
      <group position={[-15, 0, -15]}>
        <mesh position={[0, 1, 0]} castShadow>
          <boxGeometry args={[2, 2, 2]} />
          <meshStandardMaterial color="#8D6E63" />
        </mesh>
      </group>
      
      <group position={[15, 0, -15]}>
        <mesh position={[0, 0.75, 0]} castShadow>
          <cylinderGeometry args={[0, 1.5, 2, 4]} />
          <meshStandardMaterial color="#7CB342" />
        </mesh>
      </group>
    </>
  );
};

export default Environment;

================
File: client/src/game/components/Inventory.tsx
================
import React from "react";
import { Html } from "@react-three/drei";
import { usePlayerStore } from "../stores/usePlayerStore";
import { usePetStore } from "../stores/usePetStore";
import { useGameStore } from "../stores/useGameStore";
import { InventoryItem } from "../types";
import GameCard from "./ui/GameCard";
import GameButton from "./ui/GameButton";
import GameText from "./ui/GameText";

interface InventoryProps {
  onClose: () => void;
}

const Inventory: React.FC<InventoryProps> = ({ onClose }) => {
  const { player, useItem, removeItem } = usePlayerStore();
  const { pet } = usePetStore();
  const [activeTab, setActiveTab] = React.useState<string>("all");
  
  // Group items by type
  const itemsByType = React.useMemo(() => {
    const types: Record<string, InventoryItem[]> = {
      all: [...player.inventory],
      food: [],
      toy: [],
      medicine: [],
      accessory: [],
    };
    
    player.inventory.forEach(item => {
      if (types[item.type]) {
        types[item.type].push(item);
      }
    });
    
    return types;
  }, [player.inventory]);
  
  // Handle item use
  const handleUseItem = (itemId: string) => {
    const item = player.inventory.find(i => i.id === itemId);
    
    if (!item) return;
    
    // Check if item can be used based on target
    if (item.effect.target === "pet" && !pet) {
      // Can't use pet items if there's no pet
      return;
    }
    
    useItem(itemId);
  };
  
  // Handle item discard
  const handleDiscardItem = (itemId: string) => {
    removeItem(itemId);
  };
  
  // Calculate total inventory slots
  const totalSlots = 20;
  const usedSlots = player.inventory.reduce((sum, item) => sum + item.quantity, 0);
  
  return (
    <Html center fullscreen>
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-3xl shadow-lg border-4 border-primary max-w-2xl w-full max-h-[90vh] overflow-hidden">
          {/* Header */}
          <div className="p-4 bg-primary text-white flex justify-between items-center">
            <h2 className="text-2xl font-fredoka">Inventory</h2>
            <div className="flex items-center gap-2">
              <span className="text-sm font-fredoka">
                {`Slots: ${usedSlots}/${totalSlots}`}
              </span>
              <button
                onClick={onClose}
                className="p-2 hover:bg-white/20 rounded-full transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>
          </div>
          
          {/* Inventory tabs */}
          <div className="flex p-2 bg-gray-100 gap-2">
            {Object.keys(itemsByType).map(type => (
              <button
                key={type}
                onClick={() => setActiveTab(type)}
                className={`px-4 py-2 rounded-full font-fredoka text-sm transition-colors ${
                  activeTab === type 
                    ? "bg-primary text-white" 
                    : "bg-white text-gray-700 hover:bg-gray-200"
                }`}
              >
                {type.charAt(0).toUpperCase() + type.slice(1)}
                {type !== "all" && ` (${itemsByType[type].length})`}
              </button>
            ))}
          </div>
          
          {/* Coins display */}
          <div className="p-3 bg-yellow-100 flex items-center gap-2 border-b border-yellow-200">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-yellow-500">
              <circle cx="12" cy="12" r="8"></circle>
              <path d="M12 6v12"></path>
              <path d="M8 12h8"></path>
            </svg>
            <span className="font-fredoka text-gray-700">{`${player.coins} coins`}</span>
          </div>
          
          {/* Items list */}
          <div className="overflow-y-auto p-4 max-h-[50vh]">
            {itemsByType[activeTab].length === 0 ? (
              <div className="flex flex-col items-center justify-center py-8 text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M21 8V21H3V8"></path>
                  <path d="M1 3h22v5H1z"></path>
                  <path d="M10 12h4"></path>
                </svg>
                <p className="mt-2 font-fredoka">No items in this category</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {itemsByType[activeTab].map(item => (
                  <div key={item.id} className="bg-gray-50 rounded-xl p-3 border border-gray-200">
                    <div className="flex justify-between items-start">
                      <h3 className="font-fredoka text-lg text-gray-800">{item.name}</h3>
                      <span className="bg-gray-200 px-2 py-1 rounded-full text-xs font-fredoka text-gray-700">
                        x{item.quantity}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 font-fredoka mt-1">{item.description}</p>
                    <div className="mt-2 text-sm text-gray-500 font-fredoka">
                      {item.effect.target === "player" && (
                        <span>{`Affects: You (${item.effect.property} +${item.effect.value})`}</span>
                      )}
                      {item.effect.target === "pet" && (
                        <span>{`Affects: Pet (${item.effect.property} +${item.effect.value})`}</span>
                      )}
                    </div>
                    <div className="mt-3 flex gap-2">
                      <button
                        onClick={() => handleUseItem(item.id)}
                        className="px-3 py-1 bg-primary text-white rounded-full text-sm font-fredoka hover:bg-primary/80 transition-colors"
                      >
                        Use
                      </button>
                      <button
                        onClick={() => handleDiscardItem(item.id)}
                        className="px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm font-fredoka hover:bg-gray-300 transition-colors"
                      >
                        Discard
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
          
          {/* Footer */}
          <div className="p-4 border-t border-gray-200 flex justify-end">
            <button
              onClick={onClose}
              className="px-6 py-2 bg-secondary text-white rounded-full font-fredoka hover:bg-secondary/80 transition-colors"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </Html>
  );
};

export default Inventory;

================
File: client/src/game/components/LocationComponent.tsx
================
import { useState } from "react";
import { Text } from "@react-three/drei";
import { useSpring, animated } from "@react-spring/three";
import { TownLocation } from "../types";
import { useGameStore } from "../stores/useGameStore";

interface LocationComponentProps {
  location: {
    id: TownLocation;
    name: string;
    description: string;
    coordinates: [number, number, number];
  };
  isUnlocked: boolean;
  isActive: boolean;
}

const LocationComponent = ({ location, isUnlocked, isActive }: LocationComponentProps) => {
  const { setLocation } = useGameStore();
  const [hovered, setHovered] = useState(false);
  
  // Create springs for animations
  const springProps = useSpring({
    scale: hovered && isUnlocked ? 1.1 : 1,
    color: isActive ? "#4FC3F7" : (isUnlocked ? (hovered ? "#FFAB91" : "#AED581") : "#9E9E9E"),
    opacity: isUnlocked ? 1 : 0.5,
  });
  
  // Create spring for floating animation (active locations float)
  const floatSpring = useSpring({
    position: isActive 
      ? [location.coordinates[0], location.coordinates[1] + 0.5, location.coordinates[2]] 
      : location.coordinates,
    config: { mass: 1, tension: 180, friction: 12 }
  });
  
  // Handle pointer events
  const handleClick = () => {
    if (isUnlocked) {
      setLocation(location.id);
    }
  };
  
  return (
    <animated.group
      position={floatSpring.position.to((x, y, z) => [x, y, z])}
      onClick={handleClick}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
    >
      {/* Location marker (building) */}
      <animated.mesh
        scale={springProps.scale}
        castShadow
      >
        {/* Base building */}
        <boxGeometry args={[2, 2, 2]} />
        <animated.meshStandardMaterial color={springProps.color} opacity={springProps.opacity} transparent />
        
        {/* Roof */}
        <mesh position={[0, 1.5, 0]}>
          <coneGeometry args={[1.5, 1, 4]} />
          <animated.meshStandardMaterial color={springProps.color} opacity={springProps.opacity} transparent />
        </mesh>
      </animated.mesh>
      
      {/* Location name */}
      <Text
        position={[0, 3, 0]}
        fontSize={0.5}
        color="#424242"
        anchorX="center"
        anchorY="middle"
        outlineWidth={0.02}
        outlineColor="#FFFFFF"
      >
        {location.name}
      </Text>
      
      {/* Show description on hover */}
      {hovered && isUnlocked && (
        <Text
          position={[0, -1, 0]}
          fontSize={0.3}
          color="#424242"
          anchorX="center"
          anchorY="middle"
          maxWidth={5}
          outlineWidth={0.01}
          outlineColor="#FFFFFF"
        >
          {location.description}
        </Text>
      )}
      
      {/* Locked indicator */}
      {!isUnlocked && (
        <mesh position={[0, 0, 1.1]}>
          <cylinderGeometry args={[0.3, 0.3, 0.1, 8]} />
          <meshStandardMaterial color="#F44336" />
          <Text
            position={[0, 0, 0.1]}
            fontSize={0.2}
            color="#FFFFFF"
            anchorX="center"
            anchorY="middle"
          >
            🔒
          </Text>
        </mesh>
      )}
    </animated.group>
  );
};

export default LocationComponent;

================
File: client/src/game/components/Pet.tsx
================
import { useFrame } from "@react-three/fiber";
import { useRef } from "react";
import { PetType } from "../types";
import * as THREE from "three";

interface PetProps {
  type: PetType;
  color: string;
  size?: number;
  animated?: boolean;
}

const Pet = ({ type, color, size = 1, animated = true }: PetProps) => {
  const petRef = useRef<THREE.Group>(null);
  
  // Simple animation for pets
  useFrame(({ clock }) => {
    if (animated && petRef.current) {
      const t = clock.getElapsedTime();
      petRef.current.position.y = Math.sin(t * 2) * 0.1; // Gentle floating animation
      
      // Different animation based on pet type
      switch (type) {
        case PetType.dog:
          // Wagging tail effect
          if (petRef.current.children[1]) {
            petRef.current.children[1].rotation.y = Math.sin(t * 8) * 0.3;
          }
          break;
        case PetType.cat:
          // Ear twitching
          if (petRef.current.children[1] && petRef.current.children[2]) {
            petRef.current.children[1].rotation.z = Math.sin(t * 3) * 0.1;
            petRef.current.children[2].rotation.z = -Math.sin(t * 3) * 0.1;
          }
          break;
        case PetType.bird:
          // Wing flapping
          if (petRef.current.children[1] && petRef.current.children[2]) {
            petRef.current.children[1].rotation.y = Math.sin(t * 10) * 0.3;
            petRef.current.children[2].rotation.y = -Math.sin(t * 10) * 0.3;
          }
          break;
        // Other pets have a gentle bobbing motion (default)
      }
    }
  });
  
  return (
    <group ref={petRef} scale={[size, size, size]}>
      {/* Render different pet models based on type */}
      {renderPet(type, color)}
    </group>
  );
};

// Helper function to render different pet types
const renderPet = (type: PetType, color: string) => {
  switch (type) {
    case PetType.dog:
      return (
        <>
          {/* Body */}
          <mesh castShadow position={[0, 0.5, 0]}>
            <boxGeometry args={[1, 0.6, 1.2]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Tail */}
          <mesh castShadow position={[0, 0.5, 0.8]}>
            <boxGeometry args={[0.2, 0.2, 0.6]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Head */}
          <mesh castShadow position={[0, 0.7, -0.6]}>
            <boxGeometry args={[0.8, 0.7, 0.8]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Ears */}
          <mesh castShadow position={[0.3, 1, -0.6]}>
            <boxGeometry args={[0.2, 0.2, 0.1]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.3, 1, -0.6]}>
            <boxGeometry args={[0.2, 0.2, 0.1]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Eyes */}
          <mesh position={[0.2, 0.8, -1]}>
            <sphereGeometry args={[0.1, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          <mesh position={[-0.2, 0.8, -1]}>
            <sphereGeometry args={[0.1, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          
          {/* Legs */}
          <mesh castShadow position={[0.3, 0.15, -0.3]}>
            <boxGeometry args={[0.2, 0.3, 0.2]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.3, 0.15, -0.3]}>
            <boxGeometry args={[0.2, 0.3, 0.2]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[0.3, 0.15, 0.3]}>
            <boxGeometry args={[0.2, 0.3, 0.2]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.3, 0.15, 0.3]}>
            <boxGeometry args={[0.2, 0.3, 0.2]} />
            <meshStandardMaterial color={color} />
          </mesh>
        </>
      );
      
    case PetType.cat:
      return (
        <>
          {/* Body */}
          <mesh castShadow position={[0, 0.4, 0]}>
            <boxGeometry args={[0.8, 0.5, 1]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Tail */}
          <mesh castShadow position={[0, 0.5, 0.7]}>
            <cylinderGeometry args={[0.05, 0.1, 0.8, 8]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Head */}
          <mesh castShadow position={[0, 0.6, -0.5]}>
            <sphereGeometry args={[0.4, 16, 16]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Ears */}
          <mesh castShadow position={[0.2, 0.9, -0.5]} rotation={[0, 0, Math.PI/4]}>
            <coneGeometry args={[0.1, 0.2, 4]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.2, 0.9, -0.5]} rotation={[0, 0, -Math.PI/4]}>
            <coneGeometry args={[0.1, 0.2, 4]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Eyes */}
          <mesh position={[0.15, 0.65, -0.8]}>
            <sphereGeometry args={[0.08, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          <mesh position={[-0.15, 0.65, -0.8]}>
            <sphereGeometry args={[0.08, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          
          {/* Legs */}
          <mesh castShadow position={[0.25, 0.15, -0.3]}>
            <boxGeometry args={[0.1, 0.3, 0.1]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.25, 0.15, -0.3]}>
            <boxGeometry args={[0.1, 0.3, 0.1]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[0.25, 0.15, 0.3]}>
            <boxGeometry args={[0.1, 0.3, 0.1]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.25, 0.15, 0.3]}>
            <boxGeometry args={[0.1, 0.3, 0.1]} />
            <meshStandardMaterial color={color} />
          </mesh>
        </>
      );
      
    case PetType.rabbit:
      return (
        <>
          {/* Body */}
          <mesh castShadow position={[0, 0.4, 0]}>
            <sphereGeometry args={[0.4, 16, 16]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Head */}
          <mesh castShadow position={[0, 0.6, -0.4]}>
            <sphereGeometry args={[0.3, 16, 16]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Ears */}
          <mesh castShadow position={[0.1, 1, -0.4]} rotation={[0.2, 0, 0]}>
            <boxGeometry args={[0.1, 0.5, 0.05]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.1, 1, -0.4]} rotation={[0.2, 0, 0]}>
            <boxGeometry args={[0.1, 0.5, 0.05]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Eyes */}
          <mesh position={[0.1, 0.65, -0.65]}>
            <sphereGeometry args={[0.05, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          <mesh position={[-0.1, 0.65, -0.65]}>
            <sphereGeometry args={[0.05, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          
          {/* Feet */}
          <mesh castShadow position={[0.2, 0.1, 0]}>
            <sphereGeometry args={[0.15, 16, 16]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.2, 0.1, 0]}>
            <sphereGeometry args={[0.15, 16, 16]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Tail */}
          <mesh castShadow position={[0, 0.3, 0.5]}>
            <sphereGeometry args={[0.1, 16, 16]} />
            <meshStandardMaterial color="white" />
          </mesh>
        </>
      );
      
    case PetType.bird:
      return (
        <>
          {/* Body */}
          <mesh castShadow position={[0, 0.5, 0]}>
            <sphereGeometry args={[0.3, 16, 16]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Wings */}
          <mesh castShadow position={[0.3, 0.5, 0]} rotation={[0, 0, Math.PI/4]}>
            <boxGeometry args={[0.4, 0.1, 0.3]} />
            <meshStandardMaterial color={color} />
          </mesh>
          <mesh castShadow position={[-0.3, 0.5, 0]} rotation={[0, 0, -Math.PI/4]}>
            <boxGeometry args={[0.4, 0.1, 0.3]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Head */}
          <mesh castShadow position={[0, 0.7, -0.25]}>
            <sphereGeometry args={[0.2, 16, 16]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Beak */}
          <mesh castShadow position={[0, 0.7, -0.45]} rotation={[Math.PI/2, 0, 0]}>
            <coneGeometry args={[0.05, 0.2, 4]} />
            <meshStandardMaterial color="orange" />
          </mesh>
          
          {/* Eyes */}
          <mesh position={[0.1, 0.75, -0.35]}>
            <sphereGeometry args={[0.03, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          <mesh position={[-0.1, 0.75, -0.35]}>
            <sphereGeometry args={[0.03, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          
          {/* Feet */}
          <mesh castShadow position={[0.1, 0.2, 0]}>
            <boxGeometry args={[0.05, 0.1, 0.05]} />
            <meshStandardMaterial color="orange" />
          </mesh>
          <mesh castShadow position={[-0.1, 0.2, 0]}>
            <boxGeometry args={[0.05, 0.1, 0.05]} />
            <meshStandardMaterial color="orange" />
          </mesh>
        </>
      );
      
    // Handle other pet types with simple designs
    default:
      return (
        <>
          {/* Generic pet body */}
          <mesh castShadow position={[0, 0.5, 0]}>
            <sphereGeometry args={[0.5, 16, 16]} />
            <meshStandardMaterial color={color} />
          </mesh>
          
          {/* Eyes */}
          <mesh position={[0.2, 0.7, -0.4]}>
            <sphereGeometry args={[0.08, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
          <mesh position={[-0.2, 0.7, -0.4]}>
            <sphereGeometry args={[0.08, 16, 16]} />
            <meshStandardMaterial color="black" />
          </mesh>
        </>
      );
  }
};

export default Pet;

================
File: client/src/game/components/PetAssignment.tsx
================
import { useState, useRef, useEffect } from "react";
import { useFrame } from "@react-three/fiber";
import { Text, Html } from "@react-three/drei";
import { useTexture } from "@react-three/drei";
import { useSpring, animated } from "@react-spring/three";
import { useGameStore } from "../stores/useGameStore";
import { usePetStore } from "../stores/usePetStore";
import { useAudio } from "../../lib/stores/useAudio";
import { PetType, GamePhase } from "../types";
import { PET_OPTIONS } from "../constants";
import Pet from "./models/Pet";

const AnimatedText = animated(Text);

const PetAssignment = () => {
  const { setGamePhase } = useGameStore();
  const { assignRandomPet, setPetName, pet } = usePetStore();
  const { playSuccess } = useAudio();
  
  const [assignmentComplete, setAssignmentComplete] = useState(false);
  const [customName, setCustomName] = useState("");
  const [nameError, setNameError] = useState("");
  const petRef = useRef<THREE.Group>(null);
  
  // Load textures
  const skyTexture = useTexture("/textures/sky.png");
  const grassTexture = useTexture("/textures/grass.png");
  grassTexture.repeat.set(10, 10);
  grassTexture.wrapS = 1000;
  grassTexture.wrapT = 1000;
  
  // Animation for the reveal text
  const revealTextSpring = useSpring({
    from: { position: [0, 3, 0], scale: 0.5, opacity: 0 },
    to: { 
      position: [0, 3, 0], 
      scale: assignmentComplete ? 1 : 0.5, 
      opacity: assignmentComplete ? 1 : 0 
    },
    config: { mass: 1, tension: 170, friction: 26 },
    delay: 300,
  });
  
  // Rotate pet for display
  useFrame((_, delta) => {
    if (petRef.current) {
      petRef.current.rotation.y += delta * 0.5;
    }
  });
  
  // Assign random pet on component mount
  useEffect(() => {
    // Only assign a pet if one doesn't exist
    if (!pet) {
      setTimeout(() => {
        assignRandomPet();
        playSuccess();
        setAssignmentComplete(true);
      }, 2000);
    } else {
      setAssignmentComplete(true);
      setCustomName(pet.name);
    }
  }, [assignRandomPet, pet, playSuccess]);
  
  // Handle name submission
  const handleNameSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!customName.trim()) {
      setNameError("Please enter a name for your pet");
      return;
    }
    
    if (customName.length > 20) {
      setNameError("Name must be 20 characters or less");
      return;
    }
    
    // Update pet name
    setPetName(customName);
    
    // Proceed to the town
    setGamePhase(GamePhase.town);
  };
  
  // Handle the "Keep Default Name" button
  const keepDefaultName = () => {
    // Just proceed to the town
    setGamePhase(GamePhase.town);
  };
  
  return (
    <>
      {/* Sky backdrop */}
      <mesh position={[0, 0, -20]} scale={[40, 20, 1]}>
        <planeGeometry />
        <meshBasicMaterial map={skyTexture} />
      </mesh>
      
      {/* Ground */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -1, 0]} scale={[20, 20, 1]}>
        <planeGeometry />
        <meshStandardMaterial map={grassTexture} />
      </mesh>
      
      {/* Lighting */}
      <ambientLight intensity={0.6} />
      <directionalLight position={[10, 10, 5]} intensity={1} castShadow />
      
      {/* Title */}
      <Text
        font="/fonts/inter.json"
        position={[0, 4, 0]}
        color="#424242"
        fontSize={1.2}
        maxWidth={10}
        lineHeight={1}
        textAlign="center"
        anchorX="center"
        anchorY="middle"
      >
        {assignmentComplete ? "Meet Your New Friend!" : "Finding Your Perfect Pet..."}
      </Text>
      
      {/* Pet reveal text */}
      {pet && (
        <AnimatedText
          font="/fonts/inter.json"
          position={revealTextSpring.position}
          scale={revealTextSpring.scale}
          color="#424242"
          fontSize={0.7}
          maxWidth={10}
          lineHeight={1.2}
          textAlign="center"
          anchorX="center"
          anchorY="middle"
          material-transparent
          material-opacity={revealTextSpring.opacity}
        >
          {`You got a ${pet.type}!`}
        </AnimatedText>
      )}
      
      {/* Pet model */}
      {pet && (
        <group ref={petRef} position={[0, 0, -2]}>
          <Pet type={pet.type} color={pet.color} />
        </group>
      )}
      
      {/* Pet naming form (only shown after assignment) */}
      {assignmentComplete && pet && (
        <Html position={[0, -2, 0]} center transform>
          <div className="bg-white p-6 rounded-2xl shadow-lg w-80 border-4 border-primary">
            <h3 className="font-fredoka text-xl text-center mb-4">
              {`Your ${pet.type} is called ${pet.name}!`}
            </h3>
            
            <form onSubmit={handleNameSubmit}>
              <div className="mb-4">
                <label 
                  htmlFor="petName" 
                  className="block font-fredoka text-lg text-foreground mb-2"
                >
                  Want to give your pet a different name?
                </label>
                <input
                  id="petName"
                  type="text"
                  value={customName}
                  onChange={(e) => {
                    setCustomName(e.target.value);
                    setNameError("");
                  }}
                  className="w-full p-3 border-2 border-primary rounded-full text-lg font-fredoka focus:outline-none focus:ring-2 focus:ring-primary"
                  placeholder={pet.name}
                />
                {nameError && (
                  <p className="text-red-500 mt-1 text-sm font-fredoka">{nameError}</p>
                )}
              </div>
              
              <div className="flex flex-col gap-2">
                <button
                  type="submit"
                  className="bubble-button w-full"
                >
                  Save Name
                </button>
                <button
                  type="button"
                  onClick={keepDefaultName}
                  className="bubble-button-secondary w-full"
                >
                  Keep Default Name
                </button>
              </div>
            </form>
          </div>
        </Html>
      )}
      
      {/* Loading spinner (shown before assignment) */}
      {!assignmentComplete && (
        <Html position={[0, 0, 0]} center>
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
        </Html>
      )}
    </>
  );
};

export default PetAssignment;

================
File: client/src/game/components/SoundManager.tsx
================
import { useEffect } from "react";
import { useAudio } from "../../lib/stores/useAudio";
import { useGameStore } from "../stores/useGameStore";
import { GamePhase } from "../types";

const SoundManager = () => {
  const { backgroundMusic, toggleMute, isMuted } = useAudio();
  const gamePhase = useGameStore((state) => state.gamePhase);

  // Start or stop background music based on game phase
  useEffect(() => {
    if (!backgroundMusic) return;

    // Play music in all phases except the welcome screen
    if (gamePhase !== GamePhase.welcome) {
      if (!isMuted) {
        backgroundMusic.play().catch((error) => {
          console.log("Background music play prevented:", error);
        });
      }
    } else {
      backgroundMusic.pause();
      backgroundMusic.currentTime = 0;
    }

    return () => {
      backgroundMusic.pause();
    };
  }, [gamePhase, backgroundMusic, isMuted]);

  // Handle keyboard shortcut for mute/unmute (M key)
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.code === "KeyM") {
        toggleMute();
      }
    };

    window.addEventListener("keydown", handleKeyPress);
    return () => {
      window.removeEventListener("keydown", handleKeyPress);
    };
  }, [toggleMute]);

  // Mute button in the corner
  return (
    <div className="fixed bottom-4 right-4 z-50">
      <button
        onClick={toggleMute}
        className="bg-white p-3 rounded-full shadow-md hover:shadow-lg transition-all duration-200"
        aria-label={isMuted ? "Unmute" : "Mute"}
        title={isMuted ? "Unmute" : "Mute"}
      >
        {isMuted ? (
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <line x1="1" y1="1" x2="23" y2="23"></line>
            <path d="M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"></path>
            <path d="M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"></path>
            <line x1="12" y1="19" x2="12" y2="23"></line>
            <line x1="8" y1="23" x2="16" y2="23"></line>
          </svg>
        ) : (
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M3 18v-6a9 9 0 0 1 18 0v6"></path>
            <path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"></path>
          </svg>
        )}
      </button>
    </div>
  );
};

export default SoundManager;

================
File: client/src/game/components/Town.tsx
================
import { useEffect, useRef } from "react";
import { useFrame, useThree } from "@react-three/fiber";
import * as THREE from "three";
import { useTexture, useKeyboardControls } from "@react-three/drei";
import { Controls, TownLocation } from "../types";
import { TOWN_LOCATIONS } from "../constants";
import { useGameStore } from "../stores/useGameStore";
import { usePlayerStore } from "../stores/usePlayerStore";
import { useBattleStore } from "../stores/useBattleStore";
import Character from "./models/Character";
import Pet from "./models/Pet";
import Environment from "./models/Environment";
import LocationComponent from "./TownLocation";
import { usePetStore } from "../stores/usePetStore";

const Town = () => {
  const { camera } = useThree();
  const { player } = usePlayerStore();
  const { pet } = usePetStore();
  const { currentLocation, setLocation, unlockedLocations } = useGameStore();
  const { startBattle } = useBattleStore();
  
  // Player movement refs
  const playerRef = useRef<THREE.Group>(null);
  const petRef = useRef<THREE.Group>(null);
  const playerPosition = useRef(new THREE.Vector3(0, 0, 0));
  const playerRotation = useRef(new THREE.Euler(0, 0, 0));
  
  // Load textures
  const grassTexture = useTexture("/textures/grass.png");
  grassTexture.repeat.set(50, 50);
  grassTexture.wrapS = 1000;
  grassTexture.wrapT = 1000;
  
  const skyTexture = useTexture("/textures/sky.png");
  
  // Setup camera
  useEffect(() => {
    camera.position.set(0, 10, 15);
    camera.lookAt(0, 0, 0);
  }, [camera]);
  
  // Get keyboard controls
  const [, getKeys] = useKeyboardControls<Controls>();
  
  // Handle player movement and camera follow
  useFrame((_, delta) => {
    if (!playerRef.current || !petRef.current) return;
    
    const { forward, backward, leftward, rightward, interact } = getKeys();
    
    // Movement speed
    const speed = 5 * delta;
    
    // Update player position based on keys
    if (forward) {
      playerPosition.current.z -= speed;
      playerRotation.current.y = Math.PI;
    }
    if (backward) {
      playerPosition.current.z += speed;
      playerRotation.current.y = 0;
    }
    if (leftward) {
      playerPosition.current.x -= speed;
      playerRotation.current.y = Math.PI / 2;
    }
    if (rightward) {
      playerPosition.current.x += speed;
      playerRotation.current.y = -Math.PI / 2;
    }
    
    // Clamp position to town boundaries
    playerPosition.current.x = Math.max(-25, Math.min(25, playerPosition.current.x));
    playerPosition.current.z = Math.max(-25, Math.min(25, playerPosition.current.z));
    
    // Update player model
    playerRef.current.position.copy(playerPosition.current);
    playerRef.current.rotation.y = playerRotation.current.y;
    
    // Make pet follow the player with a slight delay
    const petTargetPos = new THREE.Vector3()
      .copy(playerPosition.current)
      .add(new THREE.Vector3(-1, 0, 1));
      
    petRef.current.position.lerp(petTargetPos, 0.05);
    
    // Have pet look at player
    const lookPos = new THREE.Vector3()
      .copy(playerPosition.current)
      .sub(petRef.current.position)
      .normalize();
    if (lookPos.length() > 0.1) {
      petRef.current.rotation.y = Math.atan2(lookPos.x, lookPos.z);
    }
    
    // Check for location proximity and interactions
    TOWN_LOCATIONS.forEach((loc) => {
      const locationPos = new THREE.Vector3(...loc.coordinates);
      const distance = playerPosition.current.distanceTo(locationPos);
      
      // If player is close to a location and presses interact
      if (distance < 3 && interact && unlockedLocations.includes(loc.id)) {
        handleLocationInteraction(loc.id);
      }
    });
    
    // Camera follows player
    camera.position.x = playerPosition.current.x;
    camera.position.z = playerPosition.current.z + 15;
    camera.lookAt(playerPosition.current.x, 0, playerPosition.current.z);
  });
  
  // Handle location interactions
  const handleLocationInteraction = (location: TownLocation) => {
    // Set current location
    setLocation(location);
    
    // Handle location-specific logic
    switch (location) {
      case TownLocation.park:
        // Random chance to start a battle in the park
        if (Math.random() > 0.5) {
          startBattle();
        }
        break;
      case TownLocation.shop:
        // Show shop interface
        // This would be handled in the UI components
        break;
      case TownLocation.home:
        // Restore pet happiness and player health
        break;
      case TownLocation.school:
        // Show learning minigames
        break;
      default:
        break;
    }
  };
  
  return (
    <>
      {/* Sky backdrop */}
      <mesh position={[0, 0, -100]} scale={[200, 100, 1]}>
        <planeGeometry />
        <meshBasicMaterial map={skyTexture} side={THREE.DoubleSide} />
      </mesh>
      
      {/* Ground */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]} scale={[50, 50, 1]}>
        <planeGeometry />
        <meshStandardMaterial map={grassTexture} />
      </mesh>
      
      {/* Lighting */}
      <ambientLight intensity={0.6} />
      <directionalLight position={[10, 10, 5]} intensity={1} castShadow />
      
      {/* Player character */}
      <group ref={playerRef} position={[0, 0, 0]}>
        <Character color={player.color} />
      </group>
      
      {/* Pet */}
      {pet && (
        <group ref={petRef} position={[-1, 0, 1]}>
          <Pet type={pet.type} color={pet.color} />
        </group>
      )}
      
      {/* Town Locations */}
      {TOWN_LOCATIONS.map((loc) => (
        <LocationComponent
          key={loc.id}
          location={{
            id: loc.id,
            name: loc.name,
            description: loc.description,
            coordinates: loc.coordinates as [number, number, number]
          }}
          isUnlocked={unlockedLocations.includes(loc.id)}
          isActive={currentLocation === loc.id}
        />
      ))}
      
      {/* Environment */}
      <Environment />
    </>
  );
};

export default Town;

================
File: client/src/game/components/TownLocation.tsx
================
import { useRef, useEffect } from "react";
import { Text } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";
import { useSpring, animated } from "@react-spring/three";
import { TownLocation as LocationType } from "../types";

interface TownLocationProps {
  location: {
    id: LocationType;
    name: string;
    description: string;
    coordinates: [number, number, number];
  };
  isUnlocked: boolean;
  isActive: boolean;
}

const LocationComponent: React.FC<TownLocationProps> = ({ 
  location, 
  isUnlocked,
  isActive
}) => {
  const groupRef = useRef<THREE.Group>(null);
  const floatRef = useRef<THREE.Group>(null);
  
  // Animation for floating effect
  useFrame((state) => {
    if (floatRef.current) {
      const t = state.clock.getElapsedTime();
      floatRef.current.position.y = Math.sin(t * 1.5) * 0.2 + 2;
    }
  });
  
  // Spring animation for highlighting active location
  const { scale } = useSpring({
    scale: isActive ? 1.2 : 1,
    config: { mass: 1, tension: 170, friction: 26 },
  });
  
  // Building colors based on location type
  const getBuildingColor = () => {
    switch (location.id) {
      case LocationType.home:
        return "#FFAB91"; // Secondary color
      case LocationType.shop:
        return "#4FC3F7"; // Primary color
      case LocationType.school:
        return "#AED581"; // Accent color
      case LocationType.park:
        return "#8BC34A"; // Green
      default:
        return "#F5F5F5"; // Neutral
    }
  };
  
  // Determine building shape based on location type
  const renderBuilding = () => {
    switch (location.id) {
      case LocationType.home:
        return (
          <>
            {/* House base */}
            <mesh position={[0, 0.5, 0]}>
              <boxGeometry args={[2, 1, 2]} />
              <meshStandardMaterial color={getBuildingColor()} />
            </mesh>
            {/* Roof */}
            <mesh position={[0, 1.2, 0]} rotation={[0, Math.PI / 4, 0]}>
              <coneGeometry args={[1.5, 1, 4]} />
              <meshStandardMaterial color="#FF7043" />
            </mesh>
            {/* Door */}
            <mesh position={[0, 0.4, 1.01]}>
              <boxGeometry args={[0.5, 0.8, 0.05]} />
              <meshStandardMaterial color="#8D6E63" />
            </mesh>
            {/* Windows */}
            <mesh position={[-0.6, 0.6, 1.01]}>
              <boxGeometry args={[0.4, 0.4, 0.05]} />
              <meshStandardMaterial color="#BBDEFB" />
            </mesh>
            <mesh position={[0.6, 0.6, 1.01]}>
              <boxGeometry args={[0.4, 0.4, 0.05]} />
              <meshStandardMaterial color="#BBDEFB" />
            </mesh>
          </>
        );
        
      case LocationType.shop:
        return (
          <>
            {/* Shop base */}
            <mesh position={[0, 0.75, 0]}>
              <boxGeometry args={[3, 1.5, 2]} />
              <meshStandardMaterial color={getBuildingColor()} />
            </mesh>
            {/* Roof */}
            <mesh position={[0, 1.6, 0]}>
              <boxGeometry args={[3.5, 0.2, 2.5]} />
              <meshStandardMaterial color="#0288D1" />
            </mesh>
            {/* Door */}
            <mesh position={[0, 0.5, 1.01]}>
              <boxGeometry args={[1, 1, 0.05]} />
              <meshStandardMaterial color="#CFD8DC" />
            </mesh>
            {/* Shop sign */}
            <mesh position={[0, 1.4, 1.05]}>
              <boxGeometry args={[2, 0.5, 0.1]} />
              <meshStandardMaterial color="#FFEE58" />
            </mesh>
          </>
        );
        
      case LocationType.school:
        return (
          <>
            {/* School base */}
            <mesh position={[0, 0.75, 0]}>
              <boxGeometry args={[4, 1.5, 2.5]} />
              <meshStandardMaterial color={getBuildingColor()} />
            </mesh>
            {/* Roof */}
            <mesh position={[0, 1.6, 0]}>
              <boxGeometry args={[4.2, 0.2, 2.7]} />
              <meshStandardMaterial color="#689F38" />
            </mesh>
            {/* Door */}
            <mesh position={[0, 0.5, 1.26]}>
              <boxGeometry args={[1, 1, 0.05]} />
              <meshStandardMaterial color="#5D4037" />
            </mesh>
            {/* Windows */}
            <mesh position={[-1.5, 0.75, 1.26]}>
              <boxGeometry args={[0.8, 0.8, 0.05]} />
              <meshStandardMaterial color="#BBDEFB" />
            </mesh>
            <mesh position={[1.5, 0.75, 1.26]}>
              <boxGeometry args={[0.8, 0.8, 0.05]} />
              <meshStandardMaterial color="#BBDEFB" />
            </mesh>
            {/* Flag */}
            <mesh position={[1.8, 2, 0]}>
              <boxGeometry args={[0.1, 1, 0.1]} />
              <meshStandardMaterial color="#795548" />
            </mesh>
            <mesh position={[2.1, 1.8, 0]}>
              <boxGeometry args={[0.7, 0.4, 0.05]} />
              <meshStandardMaterial color="#FF5252" />
            </mesh>
          </>
        );
        
      case LocationType.park:
        return (
          <>
            {/* Grass base */}
            <mesh position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, 0]}>
              <circleGeometry args={[3, 32]} />
              <meshStandardMaterial color="#81C784" />
            </mesh>
            {/* Trees */}
            <group position={[-1.5, 0, -1]}>
              <mesh position={[0, 0.75, 0]}>
                <cylinderGeometry args={[0.2, 0.3, 1.5, 8]} />
                <meshStandardMaterial color="#795548" />
              </mesh>
              <mesh position={[0, 1.5, 0]}>
                <coneGeometry args={[1, 2, 8]} />
                <meshStandardMaterial color="#43A047" />
              </mesh>
            </group>
            <group position={[1.5, 0, -0.5]}>
              <mesh position={[0, 0.75, 0]}>
                <cylinderGeometry args={[0.2, 0.3, 1.5, 8]} />
                <meshStandardMaterial color="#795548" />
              </mesh>
              <mesh position={[0, 1.5, 0]}>
                <coneGeometry args={[0.8, 1.5, 8]} />
                <meshStandardMaterial color="#43A047" />
              </mesh>
            </group>
            {/* Bench */}
            <mesh position={[0, 0.3, 1]}>
              <boxGeometry args={[2, 0.1, 0.5]} />
              <meshStandardMaterial color="#8D6E63" />
            </mesh>
            <mesh position={[-0.8, 0.15, 1]}>
              <boxGeometry args={[0.1, 0.3, 0.5]} />
              <meshStandardMaterial color="#5D4037" />
            </mesh>
            <mesh position={[0.8, 0.15, 1]}>
              <boxGeometry args={[0.1, 0.3, 0.5]} />
              <meshStandardMaterial color="#5D4037" />
            </mesh>
          </>
        );
        
      case LocationType.center:
        return (
          <>
            {/* Center platform */}
            <mesh position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, 0]}>
              <circleGeometry args={[3, 32]} />
              <meshStandardMaterial color="#CFD8DC" />
            </mesh>
            {/* Fountain base */}
            <mesh position={[0, 0.2, 0]}>
              <cylinderGeometry args={[1.5, 1.8, 0.4, 32]} />
              <meshStandardMaterial color="#B0BEC5" />
            </mesh>
            {/* Fountain water */}
            <mesh position={[0, 0.4, 0]}>
              <cylinderGeometry args={[1.2, 1.2, 0.2, 32]} />
              <meshStandardMaterial color="#29B6F6" />
            </mesh>
            {/* Fountain center */}
            <mesh position={[0, 0.6, 0]}>
              <cylinderGeometry args={[0.3, 0.3, 0.8, 16]} />
              <meshStandardMaterial color="#B0BEC5" />
            </mesh>
            {/* Benches */}
            <group rotation={[0, Math.PI / 4, 0]}>
              <mesh position={[2, 0.3, 0]}>
                <boxGeometry args={[1.5, 0.1, 0.5]} />
                <meshStandardMaterial color="#8D6E63" />
              </mesh>
              <mesh position={[-2, 0.3, 0]}>
                <boxGeometry args={[1.5, 0.1, 0.5]} />
                <meshStandardMaterial color="#8D6E63" />
              </mesh>
              <mesh position={[0, 0.3, 2]}>
                <boxGeometry args={[1.5, 0.1, 0.5]} />
                <meshStandardMaterial color="#8D6E63" />
              </mesh>
              <mesh position={[0, 0.3, -2]}>
                <boxGeometry args={[1.5, 0.1, 0.5]} />
                <meshStandardMaterial color="#8D6E63" />
              </mesh>
            </group>
          </>
        );
        
      default:
        return (
          <mesh position={[0, 0.5, 0]}>
            <boxGeometry args={[2, 1, 2]} />
            <meshStandardMaterial color={getBuildingColor()} />
          </mesh>
        );
    }
  };
  
  return (
    <animated.group 
      ref={groupRef} 
      position={location.coordinates}
      scale={scale}
    >
      {/* Building or location */}
      {renderBuilding()}
      
      {/* Location name */}
      <group ref={floatRef} position={[0, 2, 0]}>
        <Text
          position={[0, 0, 0]}
          color={isActive ? "#FF5722" : isUnlocked ? "#424242" : "#BDBDBD"}
          fontSize={0.5}
          maxWidth={5}
          lineHeight={1}
          textAlign="center"
          anchorX="center"
          anchorY="middle"
          font="/fonts/inter.json"
        >
          {location.name}
        </Text>
        
        {/* Locked indicator */}
        {!isUnlocked && (
          <mesh position={[0, -0.5, 0]}>
            <sphereGeometry args={[0.2, 16, 16]} />
            <meshStandardMaterial color="#F44336" />
          </mesh>
        )}
      </group>
      
      {/* Interaction hint */}
      {isActive && (
        <Text
          position={[0, 0, 3]}
          color="#424242"
          fontSize={0.3}
          maxWidth={5}
          lineHeight={1.2}
          textAlign="center"
          anchorX="center"
          anchorY="middle"
          font="/fonts/inter.json"
        >
          Press 'E' or Space to interact
        </Text>
      )}
    </animated.group>
  );
};

export default LocationComponent;

================
File: client/src/game/components/WelcomeScreen.tsx
================
import { useState, useEffect, useRef } from "react";
import { Text, useTexture, Html } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { useGameStore } from "../stores/useGameStore";
import { GamePhase } from "../types";
import * as THREE from "three";

const WelcomeScreen = () => {
  const { setGamePhase } = useGameStore();
  const { camera } = useThree();
  const [showStartButton, setShowStartButton] = useState(false);
  
  // Load textures
  const grassTexture = useTexture("/textures/grass.png");
  grassTexture.repeat.set(10, 10);
  grassTexture.wrapS = 1000;
  grassTexture.wrapT = 1000;
  
  const skyTexture = useTexture("/textures/sky.png");
  
  // Set camera position
  useEffect(() => {
    camera.position.set(0, 5, 10);
    camera.lookAt(0, 0, 0);
    
    // Show start button after a short delay
    const timer = setTimeout(() => {
      setShowStartButton(true);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [camera]);
  
  // Button animation
  const buttonRef = useRef<THREE.Mesh>(null);
  
  useFrame(({ clock }) => {
    const t = clock.getElapsedTime();
    if (buttonRef.current) {
      buttonRef.current.position.y = 1 + Math.sin(t * 1.5) * 0.1;
    }
  });
  
  return (
    <>
      {/* Sky backdrop */}
      <mesh position={[0, 0, -20]} scale={[40, 20, 1]}>
        <planeGeometry />
        <meshBasicMaterial map={skyTexture} />
      </mesh>
      
      {/* Ground */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -1, 0]} scale={[20, 20, 1]}>
        <planeGeometry />
        <meshStandardMaterial map={grassTexture} />
      </mesh>
      
      {/* Lighting */}
      <ambientLight intensity={0.6} />
      <directionalLight position={[10, 10, 5]} intensity={1} castShadow />
      
      {/* Fallback HTML overlay for better visibility */}
      <Html fullscreen>
        <div style={{ 
          position: 'absolute', 
          top: 0, 
          left: 0, 
          width: '100%', 
          height: '100%', 
          display: 'flex', 
          flexDirection: 'column',
          justifyContent: 'center', 
          alignItems: 'center',
          pointerEvents: 'none'
        }}>
          <div style={{ 
            background: 'rgba(255, 255, 255, 0.9)',
            padding: '30px 50px',
            borderRadius: '15px',
            textAlign: 'center',
            boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)'
          }}>
            <h1 style={{ 
              fontSize: '3rem', 
              color: '#4FC3F7', 
              margin: '0 0 10px 0',
              fontFamily: 'Fredoka, sans-serif'
            }}>
              Pet Adventure
            </h1>
            <p style={{ 
              fontSize: '1.2rem', 
              color: '#424242',
              marginBottom: '30px',
              fontFamily: 'Fredoka, sans-serif'
            }}>
              Begin your journey with a new animal friend!
            </p>
            <button
              style={{
                background: '#4FC3F7',
                color: 'white',
                border: 'none',
                padding: '12px 30px',
                fontSize: '1.2rem',
                borderRadius: '50px',
                cursor: 'pointer',
                pointerEvents: 'all',
                fontWeight: 'bold',
                boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
                transition: 'transform 0.2s, box-shadow 0.2s',
                fontFamily: 'Fredoka, sans-serif'
              }}
              onClick={() => setGamePhase(GamePhase.age_verification)}
            >
              START
            </button>
          </div>
        </div>
      </Html>
      
      {/* Title - Keep 3D elements as backup */}
      <Text
        font="/fonts/inter.json"
        position={[0, 4, 0]}
        color="#424242"
        fontSize={1.5}
        maxWidth={10}
        lineHeight={1}
        textAlign="center"
        anchorX="center"
        anchorY="middle"
      >
        Pet Adventure
      </Text>
      
      {/* Subtitle */}
      <Text
        font="/fonts/inter.json"
        position={[0, 2.5, 0]}
        color="#424242"
        fontSize={0.6}
        maxWidth={8}
        lineHeight={1.2}
        textAlign="center"
        anchorX="center"
        anchorY="middle"
      >
        Begin your journey with a new animal friend!
      </Text>
      
      {/* Start button */}
      {showStartButton && (
        <mesh 
          ref={buttonRef}
          position={[0, 1, 0]}
          onClick={() => setGamePhase(GamePhase.age_verification)}
        >
          <cylinderGeometry args={[1.2, 1.2, 0.4, 32]} />
          <meshStandardMaterial color="#4FC3F7" />
          <Text
            position={[0, 0, 0.21]}
            color="white"
            fontSize={0.4}
            anchorX="center"
            anchorY="middle"
          >
            START
          </Text>
        </mesh>
      )}
      
      {/* Decorative elements */}
      <group position={[-4, 0, 0]}>
        <mesh position={[0, 0.5, 0]}>
          <boxGeometry args={[1, 1, 1]} />
          <meshStandardMaterial color="#FFAB91" />
        </mesh>
      </group>
      
      <group position={[4, 0, 0]}>
        <mesh position={[0, 0.5, 0]}>
          <boxGeometry args={[1, 1, 1]} />
          <meshStandardMaterial color="#AED581" />
        </mesh>
      </group>
    </>
  );
};

export default WelcomeScreen;

================
File: client/src/game/stores/useBattleStore.ts
================
import { create } from "zustand";
import { BattleState, Enemy, BattleAction } from "../types";
import { ENEMY_TYPES, BATTLE_ACTIONS } from "../constants";
import { usePlayerStore } from "./usePlayerStore";
import { usePetStore } from "./usePetStore";
import { useGameStore } from "./useGameStore";
import { useAudio } from "../../lib/stores/useAudio";

interface BattleStoreState {
  // Battle state
  battleState: BattleState;
  enemy: Enemy | null;
  availableActions: BattleAction[];
  battleLog: string[];
  turnCount: number;
  
  // Battle actions
  startBattle: (enemyType?: string, level?: number) => void;
  endBattle: (playerWon: boolean) => void;
  performPlayerAction: (actionIndex: number) => void;
  performPetAction: () => void;
  performEnemyAction: () => void;
  addToBattleLog: (message: string) => void;
  resetBattle: () => void;
}

export const useBattleStore = create<BattleStoreState>((set, get) => ({
  battleState: BattleState.start,
  enemy: null,
  availableActions: BATTLE_ACTIONS,
  battleLog: [],
  turnCount: 0,
  
  startBattle: (enemyType, level = 1) => {
    // Determine which enemy type to use
    let enemyTemplate;
    if (enemyType) {
      enemyTemplate = ENEMY_TYPES.find(e => e.name === enemyType);
    } else {
      // Pick a random enemy type
      const randomIndex = Math.floor(Math.random() * ENEMY_TYPES.length);
      enemyTemplate = ENEMY_TYPES[randomIndex];
    }
    
    if (enemyTemplate) {
      const levelData = enemyTemplate.levels[level as keyof typeof enemyTemplate.levels] || enemyTemplate.levels[1];
      const multiplier = levelData.multiplier;
      
      // Create enemy
      const enemy: Enemy = {
        id: `enemy_${Date.now()}`,
        name: enemyTemplate.name,
        type: enemyTemplate.name.toLowerCase().replace(/\s+/g, '_'),
        level,
        health: Math.floor(enemyTemplate.baseStats.health * multiplier),
        maxHealth: Math.floor(enemyTemplate.baseStats.health * multiplier),
        attack: Math.floor(enemyTemplate.baseStats.attack * multiplier),
        defense: Math.floor(enemyTemplate.baseStats.defense * multiplier),
        coins: levelData.coins,
        experience: levelData.experience,
      };
      
      set({
        battleState: BattleState.playerTurn,
        enemy,
        turnCount: 1,
        battleLog: [`Battle started against ${enemy.name} (Level ${enemy.level})!`],
      });
      
      // Switch to battle phase
      useGameStore.getState().setGamePhase("battle");
    }
  },
  
  endBattle: (playerWon) => {
    const { enemy } = get();
    const { player } = usePlayerStore.getState();
    const { updateCoins } = usePlayerStore.getState();
    const { setGamePhase, incrementCompletedBattles } = useGameStore.getState();
    
    if (playerWon && enemy) {
      // Player won - give rewards
      updateCoins(enemy.coins);
      incrementCompletedBattles();
      
      // Play success sound
      useAudio.getState().playSuccess();
      
      // Add to battle log
      get().addToBattleLog(`You defeated ${enemy.name} and earned ${enemy.coins} coins!`);
      set({ battleState: BattleState.win });
    } else {
      // Player lost
      get().addToBattleLog(`${player.name} was defeated by ${enemy?.name || 'the enemy'}!`);
      set({ battleState: BattleState.lose });
    }
    
    // Return to town after a delay
    setTimeout(() => {
      setGamePhase("town");
      get().resetBattle();
    }, 3000);
  },
  
  performPlayerAction: (actionIndex) => {
    const { battleState, enemy, availableActions } = get();
    const { player } = usePlayerStore.getState();
    const { updatePlayerHealth } = usePlayerStore.getState();
    
    // Only perform action if it's player's turn and enemy exists
    if (battleState !== BattleState.playerTurn || !enemy) return;
    
    const action = availableActions[actionIndex];
    
    if (action.damageMultiplier > 0) {
      // Calculate damage
      const baseDamage = Math.max(0, player.attack - enemy.defense / 2);
      const damage = Math.floor(baseDamage * action.damageMultiplier);
      
      // Apply damage to enemy
      const newEnemyHealth = Math.max(0, enemy.health - damage);
      
      // Play hit sound
      useAudio.getState().playHit();
      
      // Update enemy health
      set({
        enemy: { ...enemy, health: newEnemyHealth },
        battleLog: [...get().battleLog, `${player.name} used ${action.name} and dealt ${damage} damage to ${enemy.name}!`],
      });
      
      // Check if enemy is defeated
      if (newEnemyHealth <= 0) {
        get().endBattle(true);
        return;
      }
    }
    
    // Handle special effects
    if (action.effect) {
      const { target, property, value } = action.effect;
      
      if (target === 'self') {
        // Apply effect to player
        updatePlayerHealth(property === 'health' ? value : 0);
        
        get().addToBattleLog(`${player.name} used ${action.name} and gained ${value} ${property}!`);
      }
    }
    
    // Move to pet's turn
    set({ battleState: BattleState.petTurn });
    
    // Automatically perform pet action after a short delay
    setTimeout(() => {
      get().performPetAction();
    }, 1000);
  },
  
  performPetAction: () => {
    const { battleState, enemy } = get();
    const { pet } = usePetStore.getState();
    const { decreaseCooldowns } = usePetStore.getState();
    
    // Only perform action if it's pet's turn and pet and enemy exist
    if (battleState !== BattleState.petTurn || !pet || !enemy) return;
    
    // Calculate damage
    const damage = Math.max(0, pet.attack - enemy.defense / 3);
    
    // Apply damage to enemy
    const newEnemyHealth = Math.max(0, enemy.health - damage);
    
    // Play hit sound
    useAudio.getState().playHit();
    
    // Update enemy health
    set({
      enemy: { ...enemy, health: newEnemyHealth },
      battleLog: [...get().battleLog, `${pet.name} attacked and dealt ${damage} damage to ${enemy.name}!`],
    });
    
    // Decrease cooldowns for pet abilities
    decreaseCooldowns();
    
    // Check if enemy is defeated
    if (newEnemyHealth <= 0) {
      get().endBattle(true);
      return;
    }
    
    // Move to enemy's turn
    set({ battleState: BattleState.enemyTurn });
    
    // Automatically perform enemy action after a short delay
    setTimeout(() => {
      get().performEnemyAction();
    }, 1000);
  },
  
  performEnemyAction: () => {
    const { battleState, enemy, turnCount } = get();
    const { player } = usePlayerStore.getState();
    const { updatePlayerHealth } = usePlayerStore.getState();
    const { pet } = usePetStore.getState();
    const { updatePetHealth } = usePetStore.getState();
    
    // Only perform action if it's enemy's turn and enemy exists
    if (battleState !== BattleState.enemyTurn || !enemy) return;
    
    // Decide whether to attack player or pet
    const attacksPlayer = Math.random() > 0.5;
    
    if (attacksPlayer) {
      // Attack player
      const damage = Math.max(1, enemy.attack - player.defense / 2);
      
      // Apply damage to player
      updatePlayerHealth(-damage);
      
      // Play hit sound
      useAudio.getState().playHit();
      
      // Add to battle log
      get().addToBattleLog(`${enemy.name} attacked ${player.name} and dealt ${damage} damage!`);
      
      // Check if player is defeated
      if (player.health <= 0) {
        get().endBattle(false);
        return;
      }
    } else if (pet) {
      // Attack pet
      const damage = Math.max(1, enemy.attack - pet.defense / 2);
      
      // Apply damage to pet
      updatePetHealth(-damage);
      
      // Play hit sound
      useAudio.getState().playHit();
      
      // Add to battle log
      get().addToBattleLog(`${enemy.name} attacked ${pet.name} and dealt ${damage} damage!`);
      
      // Check if pet is defeated (pet defeat doesn't end battle)
      if (pet.health <= 0) {
        get().addToBattleLog(`${pet.name} is too tired to continue fighting!`);
      }
    }
    
    // Move back to player's turn
    set({
      battleState: BattleState.playerTurn,
      turnCount: turnCount + 1,
    });
  },
  
  addToBattleLog: (message) => {
    set((state) => ({
      battleLog: [...state.battleLog, message],
    }));
  },
  
  resetBattle: () => {
    set({
      battleState: BattleState.start,
      enemy: null,
      battleLog: [],
      turnCount: 0,
    });
  },
}));

================
File: client/src/game/stores/useGameStore.ts
================
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { GamePhase, TownLocation, GameSaveData } from "../types";

interface GameState {
  gamePhase: GamePhase;
  currentLocation: TownLocation;
  unlockedLocations: TownLocation[];
  completedBattles: number;
  totalBattles: number;
  showInventory: boolean;
  showDialog: boolean;
  dialogContent: {
    title: string;
    message: string;
    onClose?: () => void;
  };
  
  // Game actions
  setGamePhase: (phase: GamePhase) => void;
  setLocation: (location: TownLocation) => void;
  unlockLocation: (location: TownLocation) => void;
  incrementCompletedBattles: () => void;
  setTotalBattles: (count: number) => void;
  toggleInventory: () => void;
  
  // Dialog actions
  showDialogMessage: (title: string, message: string, onClose?: () => void) => void;
  closeDialog: () => void;
  
  // Game save/load
  saveGame: () => GameSaveData;
  loadGame: (data: GameSaveData) => void;
  resetGame: () => void;
}

export const useGameStore = create<GameState>()(
  persist(
    (set, get) => ({
      gamePhase: GamePhase.welcome,
      currentLocation: TownLocation.center,
      unlockedLocations: [TownLocation.center, TownLocation.home, TownLocation.shop],
      completedBattles: 0,
      totalBattles: 10,
      showInventory: false,
      showDialog: false,
      dialogContent: {
        title: "",
        message: "",
      },
      
      // Game phase management
      setGamePhase: (phase) => set({ gamePhase: phase }),
      
      // Location management
      setLocation: (location) => set({ currentLocation: location }),
      unlockLocation: (location) => {
        const { unlockedLocations } = get();
        if (!unlockedLocations.includes(location)) {
          set({ unlockedLocations: [...unlockedLocations, location] });
        }
      },
      
      // Battle tracking
      incrementCompletedBattles: () => {
        const { completedBattles } = get();
        set({ completedBattles: completedBattles + 1 });
      },
      setTotalBattles: (count) => set({ totalBattles: count }),
      
      // Inventory management
      toggleInventory: () => {
        const { showInventory } = get();
        set({ showInventory: !showInventory });
      },
      
      // Dialog management
      showDialogMessage: (title, message, onClose) => {
        set({
          showDialog: true,
          dialogContent: {
            title,
            message,
            onClose,
          },
        });
      },
      closeDialog: () => {
        const { dialogContent } = get();
        set({ showDialog: false });
        if (dialogContent.onClose) {
          dialogContent.onClose();
        }
      },
      
      // Game save/load
      saveGame: () => {
        const { unlockedLocations, completedBattles } = get();
        // Import data from other stores when needed
        return {
          player: { /* player data from player store */ },
          pet: { /* pet data from pet store */ },
          gameProgress: {
            unlockedLocations,
            completedBattles,
          },
          settings: {
            musicVolume: 0.5,
            soundVolume: 0.5,
          },
        } as GameSaveData;
      },
      loadGame: (data) => {
        // Set game progress data
        set({
          unlockedLocations: data.gameProgress.unlockedLocations,
          completedBattles: data.gameProgress.completedBattles,
          gamePhase: GamePhase.town,
        });
        // Other stores should load their data from here as well
      },
      resetGame: () => {
        set({
          gamePhase: GamePhase.welcome,
          currentLocation: TownLocation.center,
          unlockedLocations: [TownLocation.center, TownLocation.home, TownLocation.shop],
          completedBattles: 0,
          totalBattles: 10,
          showInventory: false,
          showDialog: false,
          dialogContent: { title: "", message: "" },
        });
      },
    }),
    {
      name: "pet-adventure-game",
      partialize: (state) => ({
        unlockedLocations: state.unlockedLocations,
        completedBattles: state.completedBattles,
        totalBattles: state.totalBattles,
      }),
    },
  ),
);

================
File: client/src/game/stores/usePetStore.ts
================
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { Pet, PetType, SpecialAbility } from "../types";
import { PET_OPTIONS } from "../constants";

interface PetState {
  // Pet data
  pet: Pet | null;
  
  // Pet actions
  assignRandomPet: () => void;
  setPet: (petType: PetType, name: string, color: string) => void;
  setPetName: (name: string) => void;
  updatePetHealth: (amount: number) => void;
  updatePetHappiness: (amount: number) => void;
  updatePetStats: (stat: string, amount: number) => void;
  useSpecialAbility: () => void;
  decreaseCooldowns: () => void;
  
  // Save/load
  resetPet: () => void;
  loadPet: (data: Pet) => void;
}

export const usePetStore = create<PetState>()(
  persist(
    (set, get) => ({
      pet: null,
      
      // Generate and assign a random pet
      assignRandomPet: () => {
        const randomIndex = Math.floor(Math.random() * PET_OPTIONS.length);
        const petTemplate = PET_OPTIONS[randomIndex];
        const randomColorIndex = Math.floor(Math.random() * petTemplate.colors.length);
        
        const newPet: Pet = {
          type: petTemplate.type,
          name: petTemplate.name,
          color: petTemplate.colors[randomColorIndex],
          health: petTemplate.baseStats.health,
          maxHealth: petTemplate.baseStats.health,
          attack: petTemplate.baseStats.attack,
          defense: petTemplate.baseStats.defense,
          happiness: petTemplate.baseStats.happiness,
          specialAbility: { ...petTemplate.specialAbility },
        };
        
        set({ pet: newPet });
      },
      
      // Set pet with specific parameters
      setPet: (petType, name, color) => {
        const petTemplate = PET_OPTIONS.find(p => p.type === petType);
        
        if (petTemplate) {
          const newPet: Pet = {
            type: petType,
            name: name || petTemplate.name,
            color: color || petTemplate.colors[0],
            health: petTemplate.baseStats.health,
            maxHealth: petTemplate.baseStats.health,
            attack: petTemplate.baseStats.attack,
            defense: petTemplate.baseStats.defense,
            happiness: petTemplate.baseStats.happiness,
            specialAbility: { ...petTemplate.specialAbility },
          };
          
          set({ pet: newPet });
        }
      },
      
      // Update pet name
      setPetName: (name) => set((state) => {
        if (!state.pet) return state;
        return { pet: { ...state.pet, name } };
      }),
      
      // Update pet health with bounds checking
      updatePetHealth: (amount) => set((state) => {
        if (!state.pet) return state;
        
        const newHealth = Math.min(
          state.pet.maxHealth,
          Math.max(0, state.pet.health + amount)
        );
        
        return { pet: { ...state.pet, health: newHealth } };
      }),
      
      // Update pet happiness with bounds checking
      updatePetHappiness: (amount) => set((state) => {
        if (!state.pet) return state;
        
        const newHappiness = Math.min(
          100,
          Math.max(0, state.pet.happiness + amount)
        );
        
        return { pet: { ...state.pet, happiness: newHappiness } };
      }),
      
      // Update any pet stat
      updatePetStats: (stat, amount) => set((state) => {
        if (!state.pet || !(stat in state.pet)) return state;
        
        return {
          pet: {
            ...state.pet,
            [stat]: (state.pet as any)[stat] + amount,
          }
        };
      }),
      
      // Use pet's special ability if not on cooldown
      useSpecialAbility: () => set((state) => {
        if (!state.pet) return state;
        
        const { specialAbility } = state.pet;
        
        if (specialAbility.currentCooldown === 0) {
          // Set the cooldown
          const updatedAbility: SpecialAbility = {
            ...specialAbility,
            currentCooldown: specialAbility.cooldown,
          };
          
          return { pet: { ...state.pet, specialAbility: updatedAbility } };
        }
        
        return state;
      }),
      
      // Decrease cooldowns for abilities
      decreaseCooldowns: () => set((state) => {
        if (!state.pet) return state;
        
        const { specialAbility } = state.pet;
        
        if (specialAbility.currentCooldown > 0) {
          const updatedAbility: SpecialAbility = {
            ...specialAbility,
            currentCooldown: specialAbility.currentCooldown - 1,
          };
          
          return { pet: { ...state.pet, specialAbility: updatedAbility } };
        }
        
        return state;
      }),
      
      // Reset pet to null
      resetPet: () => set({ pet: null }),
      
      // Load pet data
      loadPet: (data) => set({ pet: data }),
    }),
    {
      name: "pet-adventure-pet",
    }
  )
);

================
File: client/src/game/stores/usePlayerStore.ts
================
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { InventoryItem, PlayerCharacter } from "../types";

interface PlayerState {
  // Player data
  player: PlayerCharacter;
  
  // Player actions
  setPlayerName: (name: string) => void;
  setPlayerAge: (age: number) => void;
  setPlayerColor: (color: string) => void;
  updatePlayerHealth: (amount: number) => void;
  updatePlayerStats: (stat: string, amount: number) => void;
  
  // Inventory actions
  addItem: (item: InventoryItem) => void;
  removeItem: (itemId: string) => void;
  useItem: (itemId: string) => void;
  updateCoins: (amount: number) => void;
  
  // Save/load
  resetPlayer: () => void;
  loadPlayer: (data: PlayerCharacter) => void;
}

const DEFAULT_PLAYER: PlayerCharacter = {
  name: "",
  age: 0,
  color: "#4FC3F7",
  health: 100,
  maxHealth: 100,
  attack: 10,
  defense: 5,
  inventory: [],
  coins: 20,
};

export const usePlayerStore = create<PlayerState>()(
  persist(
    (set, get) => ({
      // Initial player data
      player: { ...DEFAULT_PLAYER },
      
      // Player data management
      setPlayerName: (name) => set((state) => ({
        player: { ...state.player, name }
      })),
      
      setPlayerAge: (age) => set((state) => ({
        player: { ...state.player, age }
      })),
      
      setPlayerColor: (color) => set((state) => ({
        player: { ...state.player, color }
      })),
      
      updatePlayerHealth: (amount) => set((state) => {
        const newHealth = Math.min(
          state.player.maxHealth,
          Math.max(0, state.player.health + amount)
        );
        return {
          player: { ...state.player, health: newHealth }
        };
      }),
      
      updatePlayerStats: (stat, amount) => set((state) => {
        if (stat in state.player) {
          return {
            player: {
              ...state.player,
              [stat]: (state.player as any)[stat] + amount,
            }
          };
        }
        return state;
      }),
      
      // Inventory management
      addItem: (item) => set((state) => {
        const existingItemIndex = state.player.inventory.findIndex(i => i.id === item.id);
        
        if (existingItemIndex >= 0) {
          // Update quantity if item already exists
          const updatedInventory = [...state.player.inventory];
          updatedInventory[existingItemIndex] = {
            ...updatedInventory[existingItemIndex],
            quantity: updatedInventory[existingItemIndex].quantity + item.quantity
          };
          
          return {
            player: { ...state.player, inventory: updatedInventory }
          };
        } else {
          // Add new item
          return {
            player: {
              ...state.player,
              inventory: [...state.player.inventory, item]
            }
          };
        }
      }),
      
      removeItem: (itemId) => set((state) => {
        const itemIndex = state.player.inventory.findIndex(i => i.id === itemId);
        
        if (itemIndex >= 0) {
          const item = state.player.inventory[itemIndex];
          
          if (item.quantity > 1) {
            // Decrease quantity
            const updatedInventory = [...state.player.inventory];
            updatedInventory[itemIndex] = {
              ...item,
              quantity: item.quantity - 1
            };
            
            return {
              player: { ...state.player, inventory: updatedInventory }
            };
          } else {
            // Remove item completely
            return {
              player: {
                ...state.player,
                inventory: state.player.inventory.filter(i => i.id !== itemId)
              }
            };
          }
        }
        
        return state;
      }),
      
      useItem: (itemId) => {
        const { player } = get();
        const item = player.inventory.find(i => i.id === itemId);
        
        if (item) {
          // Apply item effect based on target
          if (item.effect.target === "player") {
            get().updatePlayerStats(item.effect.property, item.effect.value);
          }
          // If target is pet, this would be handled by the pet store
          
          // Remove one of the item
          get().removeItem(itemId);
        }
      },
      
      updateCoins: (amount) => set((state) => ({
        player: { ...state.player, coins: Math.max(0, state.player.coins + amount) }
      })),
      
      // Save/load
      resetPlayer: () => set({ player: { ...DEFAULT_PLAYER } }),
      
      loadPlayer: (data) => set({ player: data }),
    }),
    {
      name: "pet-adventure-player",
    }
  )
);

================
File: client/src/game/utils/helpers.ts
================
import { PetType } from "../types";

// Generate a random integer between min and max (inclusive)
export const randomInt = (min: number, max: number): number => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

// Pick a random element from an array
export const randomChoice = <T>(array: T[]): T => {
  return array[Math.floor(Math.random() * array.length)];
};

// Calculate level based on experience
export const calculateLevel = (experience: number): number => {
  return Math.floor(Math.sqrt(experience) / 5) + 1;
};

// Format number with commas
export const formatNumber = (num: number): string => {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

// Calculate health percentage
export const healthPercentage = (current: number, max: number): number => {
  return Math.max(0, Math.min(100, (current / max) * 100));
};

// Get color for health bar
export const healthColor = (percentage: number): string => {
  if (percentage > 60) return "#4CAF50"; // Green
  if (percentage > 30) return "#FFC107"; // Yellow
  return "#F44336"; // Red
};

// Convert pet type to friendly display name
export const petTypeToDisplayName = (type: PetType): string => {
  return type.charAt(0).toUpperCase() + type.slice(1);
};

// Get random pet color based on pet type
export const getRandomPetColor = (type: PetType): string => {
  const colorMap: Record<PetType, string[]> = {
    [PetType.dog]: ["#A87C5F", "#E0C097", "#333333", "#F5F5DC"],
    [PetType.cat]: ["#F6AD7B", "#5E5E5E", "#E0D8BB", "#FFFFFF"],
    [PetType.rabbit]: ["#FFFFFF", "#E0C097", "#A87C5F", "#888888"],
    [PetType.bird]: ["#F74371", "#4A8FE7", "#FFD166", "#06D6A0"],
    [PetType.frog]: ["#76C043", "#4CAF50", "#8BC34A", "#33691E"],
    [PetType.turtle]: ["#4CAF50", "#8D6E63", "#9E9D24", "#33691E"],
    [PetType.fish]: ["#42A5F5", "#29B6F6", "#FF9800", "#E91E63"],
    [PetType.hamster]: ["#D7B49E", "#B38867", "#FFCC80", "#BCAAA4"],
  };
  
  const colors = colorMap[type] || ["#4FC3F7"];
  return colors[Math.floor(Math.random() * colors.length)];
};

// Save game data to localStorage
export const saveToLocalStorage = (key: string, data: any): void => {
  try {
    const serializedData = JSON.stringify(data);
    localStorage.setItem(key, serializedData);
  } catch (error) {
    console.error("Error saving to localStorage:", error);
  }
};

// Load game data from localStorage
export const loadFromLocalStorage = <T>(key: string, defaultValue: T): T => {
  try {
    const serializedData = localStorage.getItem(key);
    if (serializedData === null) {
      return defaultValue;
    }
    return JSON.parse(serializedData) as T;
  } catch (error) {
    console.error("Error loading from localStorage:", error);
    return defaultValue;
  }
};

// Generate a human-readable ID
export const generateId = (prefix: string): string => {
  return `${prefix}_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
};

// Calculate damage with randomness
export const calculateDamage = (
  attackerAttack: number,
  defenderDefense: number,
  multiplier: number = 1
): number => {
  // Base damage formula
  let baseDamage = Math.max(1, attackerAttack - defenderDefense / 2);
  
  // Apply multiplier
  baseDamage *= multiplier;
  
  // Add some randomness (±20%)
  const randomFactor = 0.8 + Math.random() * 0.4; // 0.8 to 1.2
  
  // Return final damage as integer
  return Math.floor(baseDamage * randomFactor);
};

================
File: client/src/game/constants.ts
================
import { PetType, BattleAction, TownLocation, InventoryItem } from "./types";

// Game constants
export const MIN_AGE = 7; // Minimum age to play the game
export const MAX_AGE = 99;

// Pet options
export const PET_OPTIONS = [
  {
    type: PetType.dog,
    name: "Doggy",
    description: "Loyal and friendly, dogs are great companions for adventures!",
    baseStats: { health: 50, attack: 15, defense: 10, happiness: 90 },
    specialAbility: {
      name: "Loyal Bark",
      description: "Increases your defense for 3 turns",
      effect: { target: "player", property: "defense", value: 5 },
      cooldown: 3,
      currentCooldown: 0,
    },
    colors: ["#A87C5F", "#E0C097", "#333333", "#F5F5DC"],
  },
  {
    type: PetType.cat,
    name: "Kitty",
    description: "Clever and agile, cats can find hidden treasures!",
    baseStats: { health: 40, attack: 20, defense: 5, happiness: 80 },
    specialAbility: {
      name: "Sharp Claws",
      description: "A powerful attack that deals extra damage",
      effect: { target: "enemy", property: "health", value: -15 },
      cooldown: 2,
      currentCooldown: 0,
    },
    colors: ["#F6AD7B", "#5E5E5E", "#E0D8BB", "#FFFFFF"],
  },
  {
    type: PetType.rabbit,
    name: "Bunny",
    description: "Fast and cute, rabbits can help you escape danger!",
    baseStats: { health: 30, attack: 10, defense: 5, happiness: 95 },
    specialAbility: {
      name: "Quick Hop",
      description: "Avoids the next enemy attack",
      effect: { target: "self", property: "evasion", value: 100 },
      cooldown: 4,
      currentCooldown: 0,
    },
    colors: ["#FFFFFF", "#E0C097", "#A87C5F", "#888888"],
  },
  {
    type: PetType.bird,
    name: "Birdie",
    description: "Colorful and musical, birds bring joy to everyone!",
    baseStats: { health: 25, attack: 15, defense: 5, happiness: 90 },
    specialAbility: {
      name: "Melodic Song",
      description: "Heals both you and your pet",
      effect: { target: "player", property: "health", value: 10 },
      cooldown: 3,
      currentCooldown: 0,
    },
    colors: ["#F74371", "#4A8FE7", "#FFD166", "#06D6A0"],
  },
  {
    type: PetType.frog,
    name: "Froggy",
    description: "Jumpy and fun, frogs can find water sources!",
    baseStats: { health: 30, attack: 12, defense: 8, happiness: 85 },
    specialAbility: {
      name: "Sticky Tongue",
      description: "Steals an item from the enemy",
      effect: { target: "enemy", property: "stun", value: 1 },
      cooldown: 4,
      currentCooldown: 0,
    },
    colors: ["#76C043", "#4CAF50", "#8BC34A", "#33691E"],
  },
  {
    type: PetType.turtle,
    name: "Shelly",
    description: "Slow but steady, turtles have great defense!",
    baseStats: { health: 60, attack: 8, defense: 20, happiness: 75 },
    specialAbility: {
      name: "Shell Shield",
      description: "Greatly reduces damage for one turn",
      effect: { target: "self", property: "defense", value: 15 },
      cooldown: 4,
      currentCooldown: 0,
    },
    colors: ["#4CAF50", "#8D6E63", "#9E9D24", "#33691E"],
  },
  {
    type: PetType.fish,
    name: "Bubbles",
    description: "Shiny and peaceful, fish can swim through any water!",
    baseStats: { health: 20, attack: 10, defense: 5, happiness: 80 },
    specialAbility: {
      name: "Water Splash",
      description: "Confuses the enemy, reducing their accuracy",
      effect: { target: "enemy", property: "accuracy", value: -30 },
      cooldown: 3,
      currentCooldown: 0,
    },
    colors: ["#42A5F5", "#29B6F6", "#FF9800", "#E91E63"],
  },
  {
    type: PetType.hamster,
    name: "Hammy",
    description: "Tiny and energetic, hamsters can store items for you!",
    baseStats: { health: 25, attack: 12, defense: 6, happiness: 95 },
    specialAbility: {
      name: "Cheek Pouch",
      description: "Finds a random helpful item",
      effect: { target: "player", property: "itemFind", value: 1 },
      cooldown: 5,
      currentCooldown: 0,
    },
    colors: ["#D7B49E", "#B38867", "#FFCC80", "#BCAAA4"],
  },
];

// Battle actions
export const BATTLE_ACTIONS: BattleAction[] = [
  {
    name: "Attack",
    description: "A basic attack that deals normal damage",
    damageMultiplier: 1,
  },
  {
    name: "Defend",
    description: "Increase defense for one turn",
    damageMultiplier: 0,
    effect: {
      target: "self",
      property: "defense",
      value: 5,
    },
  },
  {
    name: "Special Attack",
    description: "A powerful attack that deals more damage",
    damageMultiplier: 1.5,
  },
  {
    name: "Heal",
    description: "Recover some health points",
    damageMultiplier: 0,
    effect: {
      target: "self",
      property: "health",
      value: 10,
    },
  },
];

// Enemy types
export const ENEMY_TYPES = [
  {
    name: "Wild Cat",
    baseStats: { health: 30, attack: 10, defense: 5 },
    levels: {
      1: { multiplier: 1, coins: 5, experience: 10 },
      2: { multiplier: 1.2, coins: 8, experience: 15 },
      3: { multiplier: 1.5, coins: 12, experience: 20 },
    },
  },
  {
    name: "Angry Bird",
    baseStats: { health: 25, attack: 12, defense: 3 },
    levels: {
      1: { multiplier: 1, coins: 4, experience: 8 },
      2: { multiplier: 1.2, coins: 7, experience: 12 },
      3: { multiplier: 1.5, coins: 10, experience: 18 },
    },
  },
  {
    name: "Mischievous Monkey",
    baseStats: { health: 35, attack: 8, defense: 8 },
    levels: {
      1: { multiplier: 1, coins: 6, experience: 12 },
      2: { multiplier: 1.2, coins: 10, experience: 18 },
      3: { multiplier: 1.5, coins: 15, experience: 25 },
    },
  },
  {
    name: "Sneaky Snake",
    baseStats: { health: 20, attack: 15, defense: 4 },
    levels: {
      1: { multiplier: 1, coins: 7, experience: 14 },
      2: { multiplier: 1.2, coins: 12, experience: 20 },
      3: { multiplier: 1.5, coins: 18, experience: 30 },
    },
  },
];

// Town locations
export const TOWN_LOCATIONS = [
  {
    id: TownLocation.center,
    name: "Town Center",
    description: "The central area of the town where everyone gathers.",
    coordinates: [0, 0, 0] as [number, number, number],
    unlocked: true,
  },
  {
    id: TownLocation.home,
    name: "Home",
    description: "Your cozy home where you can rest and play with your pet.",
    coordinates: [10, 0, 5] as [number, number, number],
    unlocked: true,
  },
  {
    id: TownLocation.shop,
    name: "Pet Shop",
    description: "A shop that sells pet food, toys, and other items.",
    coordinates: [-10, 0, 5] as [number, number, number],
    unlocked: true,
  },
  {
    id: TownLocation.school,
    name: "School",
    description: "Learn new skills and tricks for you and your pet.",
    coordinates: [0, 0, -15] as [number, number, number],
    unlocked: true,
  },
  {
    id: TownLocation.park,
    name: "Park",
    description: "A fun place to play and encounter wild animals.",
    coordinates: [15, 0, -10] as [number, number, number],
    unlocked: true,
  },
];

// Shop items
export const SHOP_ITEMS: Record<string, InventoryItem[]> = {
  food: [
    {
      id: "food_1",
      name: "Basic Pet Food",
      description: "Standard food that slightly restores your pet's health.",
      type: "food",
      effect: { target: "pet", property: "health", value: 10 },
      price: 5,
      quantity: 1,
    },
    {
      id: "food_2",
      name: "Premium Pet Food",
      description: "High quality food that restores more of your pet's health.",
      type: "food",
      effect: { target: "pet", property: "health", value: 25 },
      price: 15,
      quantity: 1,
    },
    {
      id: "food_3",
      name: "Tasty Treat",
      description: "A delicious treat that makes your pet happier.",
      type: "food",
      effect: { target: "pet", property: "happiness", value: 10 },
      price: 8,
      quantity: 1,
    },
  ],
  toys: [
    {
      id: "toy_1",
      name: "Bouncy Ball",
      description: "A fun ball that increases your pet's happiness.",
      type: "toy",
      effect: { target: "pet", property: "happiness", value: 15 },
      price: 10,
      quantity: 1,
    },
    {
      id: "toy_2",
      name: "Plush Toy",
      description: "A soft toy that greatly increases your pet's happiness.",
      type: "toy",
      effect: { target: "pet", property: "happiness", value: 25 },
      price: 20,
      quantity: 1,
    },
  ],
  medicine: [
    {
      id: "med_1",
      name: "Basic Medicine",
      description: "Medicine that restores some health.",
      type: "medicine",
      effect: { target: "player", property: "health", value: 15 },
      price: 12,
      quantity: 1,
    },
    {
      id: "med_2",
      name: "Advanced Medicine",
      description: "Strong medicine that restores a lot of health.",
      type: "medicine",
      effect: { target: "player", property: "health", value: 30 },
      price: 25,
      quantity: 1,
    },
  ],
  accessories: [
    {
      id: "acc_1",
      name: "Pet Collar",
      description: "A stylish collar that increases your pet's defense.",
      type: "accessory",
      effect: { target: "pet", property: "defense", value: 5 },
      price: 30,
      quantity: 1,
    },
    {
      id: "acc_2",
      name: "Friendship Bracelet",
      description: "A bracelet that increases your attack power.",
      type: "accessory",
      effect: { target: "player", property: "attack", value: 5 },
      price: 35,
      quantity: 1,
    },
  ],
};

================
File: client/src/game/types.ts
================
// Game enums
export enum Controls {
  forward = "forward",
  backward = "backward",
  leftward = "leftward",
  rightward = "rightward",
  interact = "interact",
  inventory = "inventory",
}

export enum GamePhase {
  welcome = "welcome",
  age_verification = "age_verification",
  character_creation = "character_creation",
  pet_assignment = "pet_assignment",
  town = "town",
  battle = "battle",
}

export enum TownLocation {
  center = "center",
  home = "home",
  shop = "shop",
  school = "school",
  park = "park",
}

export enum PetType {
  dog = "dog",
  cat = "cat",
  rabbit = "rabbit",
  bird = "bird",
  frog = "frog",
  turtle = "turtle",
  fish = "fish",
  hamster = "hamster",
}

export enum BattleState {
  start = "start",
  playerTurn = "playerTurn",
  petTurn = "petTurn",
  enemyTurn = "enemyTurn",
  win = "win",
  lose = "lose",
}

// Game interfaces
export interface PlayerCharacter {
  name: string;
  age: number;
  color: string;
  health: number;
  maxHealth: number;
  attack: number;
  defense: number;
  inventory: InventoryItem[];
  coins: number;
}

export interface Pet {
  type: PetType;
  name: string;
  color: string;
  health: number;
  maxHealth: number;
  attack: number;
  defense: number;
  happiness: number;
  specialAbility: SpecialAbility;
}

export interface Enemy {
  id: string;
  name: string;
  type: string;
  level: number;
  health: number;
  maxHealth: number;
  attack: number;
  defense: number;
  coins: number;
  experience: number;
}

export interface InventoryItem {
  id: string;
  name: string;
  description: string;
  type: "food" | "toy" | "medicine" | "accessory";
  effect: {
    target: "player" | "pet";
    property: string;
    value: number;
  };
  price: number;
  quantity: number;
}

export interface SpecialAbility {
  name: string;
  description: string;
  effect: {
    target: "enemy" | "self" | "player";
    property: string;
    value: number;
  };
  cooldown: number;
  currentCooldown: number;
}

export interface BattleAction {
  name: string;
  description: string;
  damageMultiplier: number;
  effect?: {
    target: "enemy" | "self" | "player" | "pet";
    property: string;
    value: number;
  };
}

export interface GameSaveData {
  player: PlayerCharacter;
  pet: Pet;
  gameProgress: {
    unlockedLocations: TownLocation[];
    completedBattles: number;
  };
  settings: {
    musicVolume: number;
    soundVolume: number;
  };
}

================
File: client/src/hooks/use-is-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: client/src/lib/stores/useAudio.tsx
================
import { create } from "zustand";

interface AudioState {
  backgroundMusic: HTMLAudioElement | null;
  hitSound: HTMLAudioElement | null;
  successSound: HTMLAudioElement | null;
  isMuted: boolean;
  
  // Setter functions
  setBackgroundMusic: (music: HTMLAudioElement) => void;
  setHitSound: (sound: HTMLAudioElement) => void;
  setSuccessSound: (sound: HTMLAudioElement) => void;
  
  // Control functions
  toggleMute: () => void;
  playHit: () => void;
  playSuccess: () => void;
}

export const useAudio = create<AudioState>((set, get) => ({
  backgroundMusic: null,
  hitSound: null,
  successSound: null,
  isMuted: true, // Start muted by default
  
  setBackgroundMusic: (music) => set({ backgroundMusic: music }),
  setHitSound: (sound) => set({ hitSound: sound }),
  setSuccessSound: (sound) => set({ successSound: sound }),
  
  toggleMute: () => {
    const { isMuted } = get();
    const newMutedState = !isMuted;
    
    // Just update the muted state
    set({ isMuted: newMutedState });
    
    // Log the change
    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);
  },
  
  playHit: () => {
    const { hitSound, isMuted } = get();
    if (hitSound) {
      // If sound is muted, don't play anything
      if (isMuted) {
        console.log("Hit sound skipped (muted)");
        return;
      }
      
      // Clone the sound to allow overlapping playback
      const soundClone = hitSound.cloneNode() as HTMLAudioElement;
      soundClone.volume = 0.3;
      soundClone.play().catch(error => {
        console.log("Hit sound play prevented:", error);
      });
    }
  },
  
  playSuccess: () => {
    const { successSound, isMuted } = get();
    if (successSound) {
      // If sound is muted, don't play anything
      if (isMuted) {
        console.log("Success sound skipped (muted)");
        return;
      }
      
      successSound.currentTime = 0;
      successSound.play().catch(error => {
        console.log("Success sound play prevented:", error);
      });
    }
  }
}));

================
File: client/src/lib/stores/useGame.tsx
================
import { create } from "zustand";
import { subscribeWithSelector } from "zustand/middleware";

export type GamePhase = "ready" | "playing" | "ended";

interface GameState {
  phase: GamePhase;
  
  // Actions
  start: () => void;
  restart: () => void;
  end: () => void;
}

export const useGame = create<GameState>()(
  subscribeWithSelector((set) => ({
    phase: "ready",
    
    start: () => {
      set((state) => {
        // Only transition from ready to playing
        if (state.phase === "ready") {
          return { phase: "playing" };
        }
        return {};
      });
    },
    
    restart: () => {
      set(() => ({ phase: "ready" }));
    },
    
    end: () => {
      set((state) => {
        // Only transition from playing to ended
        if (state.phase === "playing") {
          return { phase: "ended" };
        }
        return {};
      });
    }
  }))
);

================
File: client/src/lib/queryClient.ts
================
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey[0] as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});

================
File: client/src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

const getLocalStorage = (key: string): any =>
  JSON.parse(window.localStorage.getItem(key) || "null");
const setLocalStorage = (key: string, value: any): void =>
  window.localStorage.setItem(key, JSON.stringify(value));

export { getLocalStorage, setLocalStorage };

================
File: client/src/pages/not-found.tsx
================
import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: client/src/App.tsx
================
import { Suspense, useEffect, useState } from "react";
import { Canvas } from "@react-three/fiber";
import { KeyboardControls } from "@react-three/drei";
import { useAudio } from "./lib/stores/useAudio";
import { Controls, GamePhase } from "./game/types";
import { useGameStore } from "./game/stores/useGameStore";
import WelcomeScreen from "./game/components/WelcomeScreen";
import AgeVerification from "./game/components/AgeVerification";
import CharacterCreation from "./game/components/CharacterCreation";
import PetAssignment from "./game/components/PetAssignment";
import Town from "./game/components/Town";
import Battle from "./game/components/Battle";
import SoundManager from "./game/components/SoundManager";
import { GameInterface } from "./game/components/ui/GameInterface";
import LoadingScreen from "./game/components/ui/LoadingScreen";

// Define keyboard controls for the game
const keyboardMap = [
  { name: Controls.forward, keys: ["KeyW", "ArrowUp"] },
  { name: Controls.backward, keys: ["KeyS", "ArrowDown"] },
  { name: Controls.leftward, keys: ["KeyA", "ArrowLeft"] },
  { name: Controls.rightward, keys: ["KeyD", "ArrowRight"] },
  { name: Controls.interact, keys: ["KeyE", "Space"] },
  { name: Controls.inventory, keys: ["KeyI"] },
];

function App() {
  const [showCanvas, setShowCanvas] = useState(false);
  const gamePhase = useGameStore((state) => state.gamePhase);
  const { setBackgroundMusic, setHitSound, setSuccessSound } = useAudio();

  // Initialize audio elements
  useEffect(() => {
    // Create and set up audio elements
    const bgMusic = new Audio("/sounds/background.mp3");
    bgMusic.loop = true;
    bgMusic.volume = 0.3;

    const hit = new Audio("/sounds/hit.mp3");
    hit.volume = 0.5;

    const success = new Audio("/sounds/success.mp3");
    success.volume = 0.5;

    // Set audio in the store
    setBackgroundMusic(bgMusic);
    setHitSound(hit);
    setSuccessSound(success);

    // Show canvas after a short delay to ensure everything is loaded
    const timer = setTimeout(() => {
      setShowCanvas(true);
    }, 500);

    return () => {
      clearTimeout(timer);
      bgMusic.pause();
      hit.pause();
      success.pause();
    };
  }, [setBackgroundMusic, setHitSound, setSuccessSound]);

  // For debugging, log the current game phase
  console.log("Current game phase:", gamePhase);

  // Render appropriate component based on game phase
  const renderGameContent = () => {
    switch (gamePhase) {
      case "welcome":
        return <WelcomeScreen />;
      case "age_verification":
        return <AgeVerification />;
      case "character_creation":
        return <CharacterCreation />;
      case "pet_assignment":
        return <PetAssignment />;
      case "town":
        return <Town />;
      case "battle":
        return <Battle />;
      default:
        console.log("Using default case, rendering WelcomeScreen");
        return <WelcomeScreen />;
    }
  };

  if (!showCanvas) {
    return <LoadingScreen />;
  }

  return (
    <KeyboardControls map={keyboardMap}>
      {/* Simple welcome screen overlay if we're in welcome phase */}
      {gamePhase === "welcome" && (
        <div className="fixed inset-0 bg-blue-100 flex flex-col items-center justify-center z-10">
          <div className="bg-white rounded-xl p-8 shadow-lg text-center w-96 max-w-full">
            <h1 className="text-4xl font-bold text-blue-500 mb-4">Pet Adventure</h1>
            <p className="text-gray-700 mb-6">Begin your journey with a new animal friend!</p>
            <button 
              className="px-6 py-3 bg-blue-500 text-white rounded-full font-bold text-lg shadow-md hover:bg-blue-600 transition"
              onClick={() => useGameStore.getState().setGamePhase("age_verification")}
            >
              START
            </button>
            
            <div className="mt-8 flex justify-center space-x-6">
              <div className="w-12 h-12 bg-orange-300 rounded-lg shadow-md"></div>
              <div className="w-12 h-12 bg-green-300 rounded-lg shadow-md"></div>
              <div className="w-12 h-12 bg-blue-300 rounded-lg shadow-md"></div>
            </div>
          </div>
        </div>
      )}
      
      {/* Age verification screen */}
      {gamePhase === "age_verification" && (
        <div className="fixed inset-0 bg-blue-100 flex flex-col items-center justify-center z-10">
          <div className="bg-white rounded-xl p-8 shadow-lg text-center w-96 max-w-full">
            <h1 className="text-3xl font-bold text-blue-500 mb-4">Before We Begin</h1>
            <p className="text-gray-700 mb-6">To give you the best experience, please tell us your age</p>
            
            <form 
              onSubmit={(e) => {
                e.preventDefault();
                const ageInput = document.getElementById('age-input') as HTMLInputElement;
                const age = parseInt(ageInput.value, 10);
                
                if (isNaN(age)) {
                  alert('Please enter a valid age');
                } else if (age < 7) {
                  alert('Sorry, you must be at least 7 years old to play');
                } else if (age > 99) {
                  alert('Please enter a valid age (up to 99)');
                } else {
                  // Set the player's age in the player store
                  useGameStore.getState().setGamePhase("character_creation");
                }
              }}
              className="flex flex-col items-center"
            >
              <input
                id="age-input"
                type="number"
                min="7"
                max="99"
                placeholder="Your age"
                className="w-full p-3 border-2 border-blue-300 rounded-full text-xl text-center mb-6"
                required
              />
              
              <button 
                type="submit"
                className="px-6 py-3 bg-blue-500 text-white rounded-full font-bold text-lg shadow-md hover:bg-blue-600 transition"
              >
                Continue
              </button>
            </form>
            
            <div className="mt-8 flex justify-center space-x-6">
              <div className="w-12 h-12 bg-orange-300 rounded-lg shadow-md"></div>
              <div className="w-12 h-12 bg-green-300 rounded-lg shadow-md"></div>
              <div className="w-12 h-12 bg-blue-300 rounded-lg shadow-md"></div>
            </div>
          </div>
        </div>
      )}
      
      {/* Character Creation screen */}
      {gamePhase === "character_creation" && (
        <div className="fixed inset-0 bg-blue-100 flex flex-col items-center justify-center z-10">
          <div className="bg-white rounded-xl p-8 shadow-lg text-center w-[450px] max-w-full">
            <h1 className="text-3xl font-bold text-blue-500 mb-4">Create Your Character</h1>
            <p className="text-gray-700 mb-6">Customize your character for your pet adventure!</p>
            
            <form 
              onSubmit={(e) => {
                e.preventDefault();
                const nameInput = document.getElementById('character-name') as HTMLInputElement;
                const colorInput = document.getElementById('character-color') as HTMLInputElement;
                const name = nameInput.value.trim();
                const color = colorInput.value;
                
                if (!name) {
                  alert('Please enter a name for your character');
                } else {
                  // Set player name and color, then proceed to pet assignment
                  useGameStore.getState().setGamePhase("pet_assignment");
                }
              }}
              className="flex flex-col items-center"
            >
              <div className="mb-6 w-full">
                <label htmlFor="character-name" className="block text-left text-gray-700 mb-2">Your Name:</label>
                <input
                  id="character-name"
                  type="text"
                  placeholder="Enter your name"
                  className="w-full p-3 border-2 border-blue-300 rounded-full text-xl mb-4"
                  required
                />
                
                <label htmlFor="character-color" className="block text-left text-gray-700 mb-2">Choose your favorite color:</label>
                <div className="flex justify-between mb-2">
                  <div className="w-12 h-12 rounded-full bg-blue-500 border-2 border-transparent hover:border-gray-400 cursor-pointer" 
                       onClick={() => (document.getElementById('character-color') as HTMLInputElement).value = '#4FC3F7'}></div>
                  <div className="w-12 h-12 rounded-full bg-green-500 border-2 border-transparent hover:border-gray-400 cursor-pointer"
                       onClick={() => (document.getElementById('character-color') as HTMLInputElement).value = '#AED581'}></div>
                  <div className="w-12 h-12 rounded-full bg-red-500 border-2 border-transparent hover:border-gray-400 cursor-pointer"
                       onClick={() => (document.getElementById('character-color') as HTMLInputElement).value = '#FF8A65'}></div>
                  <div className="w-12 h-12 rounded-full bg-purple-500 border-2 border-transparent hover:border-gray-400 cursor-pointer"
                       onClick={() => (document.getElementById('character-color') as HTMLInputElement).value = '#B39DDB'}></div>
                  <div className="w-12 h-12 rounded-full bg-yellow-500 border-2 border-transparent hover:border-gray-400 cursor-pointer"
                       onClick={() => (document.getElementById('character-color') as HTMLInputElement).value = '#FFD54F'}></div>
                </div>
                <input
                  id="character-color"
                  type="hidden"
                  defaultValue="#4FC3F7"
                />
              </div>
              
              <div className="mt-4 mb-6 bg-gray-100 p-4 rounded-lg">
                <div className="w-20 h-20 mx-auto rounded-full bg-blue-500" id="character-preview"></div>
                <p className="mt-2 text-gray-500 text-sm">Your Character</p>
              </div>
              
              <button 
                type="submit"
                className="px-6 py-3 bg-blue-500 text-white rounded-full font-bold text-lg shadow-md hover:bg-blue-600 transition"
              >
                Next: Choose Your Pet
              </button>
            </form>
          </div>
        </div>
      )}
      
      {/* Pet Assignment Screen */}
      {gamePhase === "pet_assignment" && (
        <div className="fixed inset-0 bg-blue-100 flex flex-col items-center justify-center z-10">
          <div className="bg-white rounded-xl p-8 shadow-lg text-center w-[550px] max-w-full">
            <h1 className="text-3xl font-bold text-blue-500 mb-4">Choose Your Pet</h1>
            <p className="text-gray-700 mb-6">Select a pet companion for your adventure!</p>
            
            <div className="grid grid-cols-3 gap-4 mb-6">
              <div 
                className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition" 
                onClick={() => {
                  document.getElementById('pet-type')!.value = 'dog';
                  document.getElementById('pet-preview')!.style.backgroundColor = '#AED581';
                  document.getElementById('pet-label')!.innerText = 'Dog';
                }}
              >
                <div className="w-16 h-16 bg-green-400 rounded-full mx-auto mb-2"></div>
                <p className="font-medium">Dog</p>
              </div>
              
              <div 
                className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition" 
                onClick={() => {
                  document.getElementById('pet-type')!.value = 'cat';
                  document.getElementById('pet-preview')!.style.backgroundColor = '#FFD54F';
                  document.getElementById('pet-label')!.innerText = 'Cat';
                }}
              >
                <div className="w-16 h-16 bg-yellow-400 rounded-full mx-auto mb-2"></div>
                <p className="font-medium">Cat</p>
              </div>
              
              <div 
                className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition" 
                onClick={() => {
                  document.getElementById('pet-type')!.value = 'rabbit';
                  document.getElementById('pet-preview')!.style.backgroundColor = '#FFAB91';
                  document.getElementById('pet-label')!.innerText = 'Rabbit';
                }}
              >
                <div className="w-16 h-16 bg-orange-300 rounded-full mx-auto mb-2"></div>
                <p className="font-medium">Rabbit</p>
              </div>
              
              <div 
                className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition" 
                onClick={() => {
                  document.getElementById('pet-type')!.value = 'bird';
                  document.getElementById('pet-preview')!.style.backgroundColor = '#81D4FA';
                  document.getElementById('pet-label')!.innerText = 'Bird';
                }}
              >
                <div className="w-16 h-16 bg-blue-300 rounded-full mx-auto mb-2"></div>
                <p className="font-medium">Bird</p>
              </div>
              
              <div 
                className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition" 
                onClick={() => {
                  document.getElementById('pet-type')!.value = 'turtle';
                  document.getElementById('pet-preview')!.style.backgroundColor = '#A5D6A7';
                  document.getElementById('pet-label')!.innerText = 'Turtle';
                }}
              >
                <div className="w-16 h-16 bg-green-300 rounded-full mx-auto mb-2"></div>
                <p className="font-medium">Turtle</p>
              </div>
              
              <div 
                className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition" 
                onClick={() => {
                  document.getElementById('pet-type')!.value = 'hamster';
                  document.getElementById('pet-preview')!.style.backgroundColor = '#CE93D8';
                  document.getElementById('pet-label')!.innerText = 'Hamster';
                }}
              >
                <div className="w-16 h-16 bg-purple-300 rounded-full mx-auto mb-2"></div>
                <p className="font-medium">Hamster</p>
              </div>
            </div>
            
            <form 
              onSubmit={(e) => {
                e.preventDefault();
                const nameInput = document.getElementById('pet-name') as HTMLInputElement;
                const typeInput = document.getElementById('pet-type') as HTMLInputElement;
                const name = nameInput.value.trim();
                const type = typeInput.value;
                
                if (!name) {
                  alert('Please enter a name for your pet');
                } else if (!type) {
                  alert('Please select a pet type');
                } else {
                  // Save pet information and start the game
                  useGameStore.getState().setGamePhase("town");
                }
              }}
              className="flex flex-col items-center"
            >
              <div className="mt-4 mb-6 bg-gray-100 p-4 rounded-lg flex items-center">
                <div className="w-20 h-20 rounded-full bg-green-400" id="pet-preview"></div>
                <div className="ml-4 text-left">
                  <p className="text-gray-500 text-sm">Your Pet:</p>
                  <p className="font-bold text-lg" id="pet-label">Dog</p>
                  <input
                    id="pet-name"
                    type="text"
                    placeholder="Pet's name"
                    className="mt-1 p-2 border-2 border-blue-300 rounded-full text-sm"
                    required
                  />
                </div>
              </div>
              
              <input
                id="pet-type"
                type="hidden"
                defaultValue="dog"
              />
              
              <button 
                type="submit"
                className="px-6 py-3 bg-blue-500 text-white rounded-full font-bold text-lg shadow-md hover:bg-blue-600 transition"
              >
                Start Adventure
              </button>
            </form>
          </div>
        </div>
      )}
      
      {/* Town Screen */}
      {gamePhase === "town" && (
        <div className="fixed inset-0 bg-blue-100 flex flex-col items-center justify-center z-10">
          <div className="bg-white rounded-xl p-8 shadow-lg text-center w-[550px] max-w-full">
            <h1 className="text-3xl font-bold text-blue-500 mb-4">Welcome to Pet Town!</h1>
            <p className="text-gray-700 mb-6">Explore the town with your pet companion!</p>
            
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition">
                <div className="w-16 h-16 bg-orange-300 rounded-lg mx-auto mb-2"></div>
                <p className="font-medium">Home</p>
                <p className="text-xs text-gray-500">Rest and play with your pet</p>
              </div>
              
              <div className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition">
                <div className="w-16 h-16 bg-blue-300 rounded-lg mx-auto mb-2"></div>
                <p className="font-medium">Pet Shop</p>
                <p className="text-xs text-gray-500">Buy food and toys</p>
              </div>
              
              <div className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition">
                <div className="w-16 h-16 bg-green-300 rounded-lg mx-auto mb-2"></div>
                <p className="font-medium">Park</p>
                <p className="text-xs text-gray-500">Meet other pets and play</p>
              </div>
              
              <div className="bg-blue-50 p-4 rounded-lg cursor-pointer hover:bg-blue-100 transition">
                <div className="w-16 h-16 bg-red-300 rounded-lg mx-auto mb-2"></div>
                <p className="font-medium">Adventure</p>
                <p className="text-xs text-gray-500">Go on an adventure with your pet</p>
              </div>
            </div>
            
            <div className="mt-4 mb-6 bg-gray-100 p-4 rounded-lg flex items-center">
              <div className="flex space-x-4">
                <div className="w-16 h-16 bg-blue-500 rounded-full"></div>
                <div className="w-16 h-16 bg-green-400 rounded-full"></div>
              </div>
              <div className="ml-4 text-left">
                <p className="font-bold">You and your pet are ready for adventures!</p>
                <p className="text-sm text-gray-500">Click on a location to explore</p>
              </div>
            </div>
            
            <p className="text-sm text-gray-500 mt-6">
              This is a simple demo of a pet adventure game. In a complete game, you would be able to interact with these locations, play with your pet, go on adventures, and more!
            </p>
          </div>
        </div>
      )}
      
      <Canvas
        shadows
        camera={{
          position: [0, 5, 10],
          fov: 60,
          near: 0.1,
          far: 1000,
        }}
        gl={{
          antialias: true,
          powerPreference: "default",
        }}
      >
        <color attach="background" args={["#87CEEB"]} />
        
        {/* Game content based on current phase */}
        <Suspense fallback={null}>
          {renderGameContent()}
        </Suspense>
      </Canvas>

      {/* UI elements outside of Canvas */}
      <GameInterface />
      <SoundManager />
    </KeyboardControls>
  );
}

export default App;

================
File: client/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Main color palette */
    --primary: 195 89% 64%; /* #4FC3F7 (cheerful blue) */
    --primary-foreground: 0 0% 98%; /* #fafafa */
    
    --secondary: 14 100% 78%; /* #FFAB91 (warm coral) */
    --secondary-foreground: 0 0% 98%; /* #fafafa */
    
    --accent: 93 53% 68%; /* #AED581 (fresh green) */
    --accent-foreground: 0 0% 98%; /* #fafafa */
    
    --background: 0 0% 96%; /* #F5F5F5 (light grey) */
    --foreground: 0 0% 26%; /* #424242 (soft black) */
    
    /* Shadcn UI colors */
    --card: 0 0% 100%;
    --card-foreground: 0 0% 26%;
    
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 26%;
    
    --muted: 0 0% 90%;
    --muted-foreground: 0 0% 45%;
    
    --border: 0 0% 85%;
    --input: 0 0% 85%;
    
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;
    
    --ring: 195 89% 64%;
    
    /* Chart colors */
    --chart-1: 195 89% 64%;
    --chart-2: 14 100% 78%;
    --chart-3: 93 53% 68%;
    --chart-4: 0 0% 26%;
    --chart-5: 0 0% 90%;
    
    /* Sidebar colors */
    --sidebar-background: 0 0% 100%;
    --sidebar-foreground: 0 0% 26%;
    --sidebar-primary: 195 89% 64%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 93 53% 68%;
    --sidebar-accent-foreground: 0 0% 98%;
    --sidebar-border: 0 0% 85%;
    --sidebar-ring: 195 89% 64%;
    
    --radius: 1rem;
  }

  .dark {
    --background: 0 0% 10%;
    --foreground: 0 0% 98%;
    
    --card: 0 0% 15%;
    --card-foreground: 0 0% 98%;
    
    --popover: 0 0% 15%;
    --popover-foreground: 0 0% 98%;
    
    --primary: 195 89% 64%;
    --primary-foreground: 0 0% 10%;
    
    --secondary: 14 100% 78%;
    --secondary-foreground: 0 0% 10%;
    
    --accent: 93 53% 68%;
    --accent-foreground: 0 0% 10%;
    
    --muted: 0 0% 20%;
    --muted-foreground: 0 0% 70%;
    
    --border: 0 0% 20%;
    --input: 0 0% 20%;
    
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;
    
    --ring: 195 89% 64%;
  }

  * {
    @apply border-border;
  }

  body {
    @apply font-fredoka antialiased bg-background text-foreground;
    margin: 0;
    padding: 0;
    overflow: hidden;
    width: 100vw;
    height: 100vh;
  }
}

@layer utilities {
  .font-comic {
    font-family: 'Comic Neue', cursive;
  }
  
  .font-fredoka {
    font-family: 'Fredoka', sans-serif;
  }
}

#root {
  width: 100%;
  height: 100%;
  position: fixed;
}

canvas {
  width: 100% !important;
  height: 100% !important;
  touch-action: none;
}

.game-text {
  font-family: 'Comic Neue', cursive;
  font-weight: 700;
}

.game-button {
  @apply font-fredoka font-bold rounded-full py-3 px-6 text-lg transition-all duration-200;
  @apply shadow-md hover:shadow-lg active:scale-95;
  @apply focus:outline-none focus:ring-4 focus:ring-primary/50;
}

.game-card {
  @apply bg-white rounded-2xl shadow-lg overflow-hidden;
  @apply border-4 border-primary;
}

.bubble-button {
  @apply rounded-full bg-primary text-white font-fredoka font-bold;
  @apply py-3 px-6 shadow-md hover:shadow-lg active:scale-95;
  @apply transition-all duration-200;
}

.bubble-button-secondary {
  @apply rounded-full bg-secondary text-white font-fredoka font-bold;
  @apply py-3 px-6 shadow-md hover:shadow-lg active:scale-95;
  @apply transition-all duration-200;
}

.bubble-button-accent {
  @apply rounded-full bg-accent text-white font-fredoka font-bold;
  @apply py-3 px-6 shadow-md hover:shadow-lg active:scale-95;
  @apply transition-all duration-200;
}

/* Animations */
@keyframes bounce {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

.animate-bounce-slow {
  animation: bounce 2s infinite;
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-5px); }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

.animate-pulse-slow {
  animation: pulse 3s infinite;
}

@keyframes loading-bar {
  0% { width: 5%; }
  50% { width: 70%; }
  75% { width: 85%; }
  100% { width: 100%; }
}

.animate-loading-bar {
  animation: loading-bar 2s ease-in-out infinite;
}

================
File: client/src/main.tsx
================
import { createRoot } from "react-dom/client";
import { QueryClientProvider } from "@tanstack/react-query";
import { queryClient } from "./lib/queryClient";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")!).render(
  <QueryClientProvider client={queryClient}>
    <App />
  </QueryClientProvider>
);

================
File: client/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pet Adventure</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Comic+Neue:wght@400;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: server/index.ts
================
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 5000
  // this serves both the API and the client
  const port = 5000;
  server.listen(port, () => {
    log(`serving on port ${port}`);
  });
})();

================
File: server/routes.ts
================
import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";

export async function registerRoutes(app: Express): Promise<Server> {
  // put application routes here
  // prefix all routes with /api

  // use storage to perform CRUD operations on the storage interface
  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)

  const httpServer = createServer(app);

  return httpServer;
}

================
File: server/storage.ts
================
import { users, type User, type InsertUser } from "@shared/schema";

// modify the interface with any CRUD methods
// you might need

export interface IStorage {
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  currentId: number;

  constructor() {
    this.users = new Map();
    this.currentId = 1;
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentId++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
}

export const storage = new MemStorage();

================
File: server/vite.ts
================
import express, { type Express } from "express";
import fs from "fs";
import path, { dirname } from "path";
import { fileURLToPath } from "url";
import { createServer as createViteServer, createLogger } from "vite";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        __dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(__dirname, "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}

================
File: shared/schema.ts
================
import { pgTable, text, serial, integer, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;

================
File: .gitignore
================
node_modules
dist
.DS_Store
server/public
vite.config.ts.*
*.tar.gz
.env

================
File: .replit
================
modules = ["nodejs-20", "bash", "web"]
run = "npm run dev"
hidden = [".config", ".git", "generated-icon.png", "node_modules", "dist"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "cloudrun"
run = ["sh", "-c", "npm run dev"]

[[ports]]
localPort = 5000
externalPort = 80

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start Game"

[[workflows.workflow]]
name = "Start Game"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"
waitForPort = 5000

================
File: CLAUDE.md
================
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

This is a 3D pet adventure game built with React Three Fiber and Express. Players create characters, choose pets, and explore a virtual town with battle mechanics. The architecture follows a client-server pattern with shared TypeScript schemas.

## Development Commands

- `npm run dev` - Start development server with hot reload
- `npm run build` - Build client and server for production
- `npm run start` - Run production build
- `npm run check` - Run TypeScript type checking
- `npm run db:push` - Push database schema changes to Neon DB

## Architecture

### Client Architecture (React + Three.js)
- **Game Flow**: Welcome → Age Verification → Character Creation → Pet Assignment → Town/Battle
- **State Management**: Zustand stores for game state, player data, pets, and battles
- **3D Rendering**: React Three Fiber with @react-three/drei utilities
- **UI Components**: Radix UI primitives with Tailwind CSS styling

### Key Store Files
- `useGameStore.ts` - Main game phase and progress tracking
- `usePlayerStore.ts` - Player character data and inventory
- `usePetStore.ts` - Pet companion data and abilities
- `useBattleStore.ts` - Turn-based combat mechanics

### Server Architecture (Express + PostgreSQL)
- **Database**: Drizzle ORM with Neon PostgreSQL
- **API**: Express routes in `server/routes.ts`
- **Development**: Vite integration for hot reload in dev mode
- **Production**: Static file serving with esbuild bundling

### Shared Schema
- `shared/schema.ts` - Database tables and Zod validation schemas
- `client/src/game/types.ts` - Game enums and TypeScript interfaces

## Game State Flow

Game phases are managed through `GamePhase` enum and stored in `useGameStore`. Each phase renders different UI components while maintaining the underlying Three.js canvas. The game persists progress through Zustand's persist middleware.

## Database Configuration

Uses Drizzle ORM with PostgreSQL via Neon. Database URL must be set in environment variables. Schema changes are pushed using `npm run db:push`.

================
File: docker-compose.yml
================
version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: wandering_companions_db
    environment:
      POSTGRES_DB: wandering_companions
      POSTGRES_USER: wandering_user
      POSTGRES_PASSWORD: wandering_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wandering_user -d wandering_companions"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

================
File: drizzle.config.ts
================
import { defineConfig } from "drizzle-kit";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL, ensure the database is provisioned");
}

export default defineConfig({
  out: "./migrations",
  schema: "./shared/schema.ts",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL,
  },
});

================
File: package.json
================
{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev": "tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push",
    "db:reset": "docker-compose down -v && docker-compose up -d && sleep 5 && npm run db:push"
  },
  "dependencies": {
    "@fontsource/inter": "^5.2.5",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@react-three/drei": "^9.122.0",
    "@react-three/fiber": "^8.18.0",
    "@react-three/postprocessing": "^2.19.1",
    "@tanstack/react-query": "^5.60.5",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "connect-pg-simple": "^10.0.0",
    "date-fns": "^3.6.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.3.0",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "framer-motion": "^11.13.1",
    "gl-matrix": "^3.4.3",
    "gsap": "^3.12.5",
    "howler": "^2.2.4",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.453.0",
    "matter-js": "^0.20.0",
    "memorystore": "^1.6.7",
    "meshline": "^3.3.1",
    "next-themes": "^0.4.5",
    "ogl": "^1.0.11",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "pixi.js": "^8.8.1",
    "postprocessing": "^6.36.0",
    "r3f-perf": "^7.2.3",
    "react": "^18.3.1",
    "react-confetti": "^6.4.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-haiku": "^2.2.0",
    "react-helmet-async": "^2.0.5",
    "react-hook-form": "^7.53.1",
    "react-icons": "^5.4.0",
    "react-leaflet": "^4.2.1",
    "react-resizable-panels": "^2.1.4",
    "react-router-dom": "^6.26.0",
    "react-syntax-highlighter": "^15.5.0",
    "react-use-gesture": "^9.1.3",
    "react-useanimations": "^2.10.0",
    "recharts": "^2.13.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.4",
    "tailwind-scrollbar": "^3.1.0",
    "tailwindcss-animate": "^1.0.7",
    "three": "^0.170.0",
    "vaul": "^1.1.0",
    "vite-plugin-glsl": "^1.3.1",
    "wouter": "^3.3.5",
    "ws": "^8.18.0",
    "zod": "^3.23.8",
    "zod-validation-error": "^3.4.0",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.15",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "4.17.21",
    "@types/express-session": "^1.18.0",
    "@types/node": "20.16.11",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.30.4",
    "esbuild": "^0.25.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "tsx": "^4.19.1",
    "typescript": "5.6.3",
    "vite": "^5.4.14"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: replit.nix
================
{pkgs}: {
  deps = [
    pkgs.tree
  ];
}

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./client/index.html", "./client/src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;

================
File: tasks.md
================
# Pet Adventure Game - Development Tasks for Age 7+ Completion

## <¯ **PRIORITY 1 - Core Missing Functionality**

### **Shop System Implementation**
- [ ] Create `Shop.tsx` component with tabbed interface (Food, Toys, Medicine, Accessories)
- [ ] Implement purchase functionality with coin deduction
- [ ] Add item purchase confirmation dialogs
- [ ] Create shop keeper NPC character with dialogue
- [ ] Add shop item previews and descriptions for young readers
- [ ] Implement shop opening hours and "closed" states

### **Educational Learning System (School)**
- [ ] Create `School.tsx` component with learning activities
- [ ] **Math Mini-Games (Age 7 appropriate):**
  - [ ] Pet feeding math (addition/subtraction up to 20)
  - [ ] Coin counting exercises
  - [ ] Shape recognition with pet toys
  - [ ] Simple word problems with pets
- [ ] **Reading Activities:**
  - [ ] Pet story creation tool
  - [ ] Vocabulary building with pet-related words
  - [ ] Reading comprehension with short pet adventures
- [ ] **Science Activities:**
  - [ ] Pet care basics (feeding, habitat, needs)
  - [ ] Animal classification mini-game
  - [ ] Simple ecosystem concepts
- [ ] Progress tracking for each learning activity
- [ ] Rewards system (coins, pet accessories) for completed lessons

### **Tutorial System**
- [ ] Create interactive tutorial for first-time players
- [ ] Add help tooltips throughout the game
- [ ] Create parent/teacher guide integration
- [ ] Add visual indicators for clickable elements
- [ ] Implement step-by-step onboarding flow

## <¯ **PRIORITY 2 - Game Progression & Engagement**

### **Quest System**
- [ ] Create `Quest.tsx` component and quest management
- [ ] **Starter Quests:**
  - [ ] "Feed Your Pet" - introduce shop and feeding
  - [ ] "Learn Something New" - introduce school activities
  - [ ] "Make a Friend" - introduce social mechanics
  - [ ] "Explore the Park" - introduce battle system
- [ ] Quest tracking UI and progress indicators
- [ ] Quest rewards (experience, coins, items)
- [ ] Daily/weekly quest rotation for replay value

### **Achievement System**
- [ ] Create `Achievements.tsx` component
- [ ] **Age-Appropriate Achievements:**
  - [ ] "Good Student" - complete 5 learning activities
  - [ ] "Pet Care Expert" - keep pet happy for 7 days
  - [ ] "Brave Explorer" - win 10 battles
  - [ ] "Smart Shopper" - buy first item from shop
  - [ ] "Math Master" - solve 20 math problems correctly
- [ ] Achievement badges and celebration animations
- [ ] Progress tracking and statistics

### **Pet Growth & Development**
- [ ] Pet experience system based on activities
- [ ] Pet leveling with stat improvements
- [ ] Pet evolution/appearance changes
- [ ] Pet mood system affecting performance
- [ ] Pet care reminders and needs tracking

## <¯ **PRIORITY 3 - Enhanced User Experience**

### **Home Location Enhancement**
- [ ] Create `Home.tsx` component with interactive rooms
- [ ] Pet bedroom with bed, toys, and feeding area
- [ ] Player bedroom for customization
- [ ] Pet care activities (feeding, playing, grooming)
- [ ] Furniture placement and decoration system

### **Social Features (Age-Appropriate)**
- [ ] Pet photo sharing (local gallery)
- [ ] Achievement sharing with parents/teachers
- [ ] Collaborative quests for classroom use
- [ ] Pet playdate system (local multiplayer)

### **Accessibility & Safety**
- [ ] Large, clear fonts for young readers
- [ ] Color-blind friendly palette
- [ ] Audio narration for text
- [ ] Parental controls and time limits
- [ ] Safe, positive messaging throughout

## <¯ **PRIORITY 4 - Content Expansion**

### **Additional Learning Content**
- [ ] **Seasonal Events:**
  - [ ] Spring: Plant growing mini-game
  - [ ] Summer: Weather patterns activity
  - [ ] Fall: Leaf collection and sorting
  - [ ] Winter: Animal hibernation concepts
- [ ] **Advanced Math (for grade progression):**
  - [ ] Multiplication tables with pet treats
  - [ ] Geometry with pet house building
  - [ ] Basic fractions with pet food portions

### **More Locations**
- [ ] **Library** - reading activities and story creation
- [ ] **Veterinarian** - pet health and animal care learning
- [ ] **Garden** - plant growing and nature science
- [ ] **Beach/Lake** - water cycle and aquatic pet activities

### **Mini-Games Collection**
- [ ] Memory matching with pet pictures
- [ ] Puzzle games with increasing difficulty
- [ ] Simple coding concepts with pet commands
- [ ] Art creation tools for pet drawings

## <¯ **PRIORITY 5 - Technical Infrastructure**

### **Server-Side Implementation**
- [ ] User authentication system for teachers/parents
- [ ] Progress reporting dashboard for educators
- [ ] Cloud save synchronization
- [ ] Classroom management tools
- [ ] Usage analytics for educational insights

### **Performance & Polish**
- [ ] Mobile/tablet responsiveness
- [ ] Loading screen optimization
- [ ] Save game cloud backup
- [ ] Offline mode functionality
- [ ] Error handling and recovery

### **Quality Assurance**
- [ ] Age-appropriate content review
- [ ] Educational value assessment
- [ ] Accessibility testing
- [ ] Performance testing on various devices
- [ ] Parent/teacher feedback integration

## <¯ **PRIORITY 6 - Educational Standards Alignment**

### **Curriculum Integration**
- [ ] Common Core Math standards alignment (Grade 1-2)
- [ ] Reading level appropriate content
- [ ] Science learning objectives mapping
- [ ] Social-emotional learning components
- [ ] Assessment tools for teachers

### **Reporting & Analytics**
- [ ] Student progress reports
- [ ] Time spent on activities tracking
- [ ] Learning outcome measurements
- [ ] Parent communication tools
- [ ] Teacher dashboard with class overview

---

## =Ë **Estimated Development Timeline**

- **Priority 1 (Core Features):** 4-6 weeks
- **Priority 2 (Progression):** 3-4 weeks  
- **Priority 3 (UX Enhancement):** 2-3 weeks
- **Priority 4 (Content):** 4-5 weeks
- **Priority 5 (Infrastructure):** 3-4 weeks
- **Priority 6 (Educational):** 2-3 weeks

**Total Estimated Time:** 18-25 weeks for complete implementation

## <® **Current Game State**
The game has a solid foundation with working 3D movement, pet system, battle mechanics, and save functionality. The main gaps are in educational content, shop functionality, and structured progression suitable for 7-year-old players.

================
File: tsconfig.json
================
{
  "include": ["client/src/**/*", "shared/**/*", "server/**/*"],
  "exclude": ["node_modules", "build", "dist", "**/*.test.ts"],
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/typescript/tsbuildinfo",
    "noEmit": true,
    "module": "ESNext",
    "strict": true,
    "lib": ["esnext", "dom", "dom.iterable"],
    "jsx": "preserve",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "allowImportingTsExtensions": true,
    "moduleResolution": "bundler",
    "baseUrl": ".",
    "types": ["node", "vite/client"],
    "paths": {
      "@/*": ["./client/src/*"],
      "@shared/*": ["./shared/*"]
    }
  }
}

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path, { dirname } from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath } from "url";
import glsl from "vite-plugin-glsl";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    glsl(), // Add GLSL shader support
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client", "src"),
      "@shared": path.resolve(__dirname, "shared"),
    },
  },
  root: path.resolve(__dirname, "client"),
  build: {
    outDir: path.resolve(__dirname, "dist/public"),
    emptyOutDir: true,
  },
  // Add support for large models and audio files
  assetsInclude: ["**/*.gltf", "**/*.glb", "**/*.mp3", "**/*.ogg", "**/*.wav"],
});
